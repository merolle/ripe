$
  #include <libxml/parser.h>
  #include <libxml/tree.h>
  #include <libxml/xpath.h>
$

namespace Xml
  class Document
    $ xmlDoc *doc; $

    new_from_text(text) | constructor
      $
        const char* text = val_to_string(__text);
        @doc = xmlReadMemory(text,
                             strlen(text),
                             "noname.xml", NULL, 0);
        if (@doc == NULL){
          exc_raise("Failed to parse XML text");
        }
      $

    get_root()
      node = Xml.Node.new()
      $ xmlNode** node = obj_c_data(__node);
        *node = xmlDocGetRootElement(@doc); $
      return node

    # Apply an Xpath expression and return array of nodes that are results
    apply_xpath(expr)
      $
        xmlXPathContextPtr xpath_context = xmlXPathNewContext(@doc);
        if (!xpath_context) exc_raise("Failed to create xpath context");
        const char* expr = val_to_string(__expr);
        xmlXPathObjectPtr xpath_object =
          xmlXPathEvalExpression((const xmlChar*) expr, xpath_context);
        if (!xpath_object)
          exc_raise("Failed to evaluate xpath expression '%s'", expr);
        xmlNodeSetPtr nodes = xpath_object->nodesetval;

        Value __array = array1_new(nodes->nodeNr);
        Array1* array = val_to_array1(__array);
        for (int i = 0; i < nodes->nodeNr; i++){
      $
      node = Xml.Node.new()
      $
          xmlNode** node = obj_c_data(__node);
          *node = nodes->nodeTab[i];
          array1_index_set(array, i+1, __node);
        }
        xmlXPathFreeObject(xpath_object);
        xmlXPathFreeContext(xpath_context); $
      return $ __array $

  namespace Node
    var Element = $ int64_to_val(XML_ELEMENT_NODE) $
    var Text = $ int64_to_val(XML_TEXT_NODE) $

  class Node
    $ xmlNode* node; $

    new() | constructor
      pass

    name() | virtual_get
      $ if (!@node->name) RRETURN(VALUE_NIL); $
      return $ string_to_val((const char*) @node->name) $

    type() | virtual_get
      return $ int64_to_val(@node->type) $

    content() | virtual_get
      $ if (!@node->content) RRETURN(VALUE_NIL); $
      return $ string_to_val((const char*) @node->content) $

    child() | virtual_get
      $
        xmlNode* child = @node->children;
        if (child == NULL) RRETURN(VALUE_NIL);
      $
      node = Xml.Node.new()
      $
        xmlNode** node = obj_c_data(__node);
        *node = child;
      $
      return node

    next() | virtual_get
      $
        xmlNode* next = @node->next;
        if (next == NULL) RRETURN(VALUE_NIL);
      $
      node = Xml.Node.new()
      $
        xmlNode** node = obj_c_data(__node);
        *node = next;
      $
      return node
