#$ rdoc-file Array1
#$ rdoc-name Array1
#$ rdoc-header Array1
#$ A one-dimensional array object.

$
  typedef Value (*CmpFunc) (Value, Value);

  static void merge_sort2(Value* arr, int64 a, int64 b, Value* tmp,
                   CmpFunc cfunc)
  {
    if (a == b) return;
    if (b == a + 1){
      if (cfunc(arr[a], arr[b]) == VALUE_TRUE) return;
      Value t = arr[b];
      arr[b] = arr[a];
      arr[a] = t;
      return;
    }
    const int64 middle = (a+b)/2;
    merge_sort2(arr, a, middle, tmp, cfunc);
    merge_sort2(arr, middle+1, b, tmp, cfunc);

    // Merging step
    int64 left = a;
    int64 right = middle+1;
    int64 t = 0;
    for(;;){
      if (left > middle){
        // Finished with left.
        while (right <= b){
          tmp[t] = arr[right];
          right++; t++;
        }
        break;
      }
      if (right > b){
        // Finished with right.
        while (left <= middle){
          tmp[t] = arr[left];
          left++; t++;
        }
        break;
      }
      if (cfunc(arr[left], arr[right]) == VALUE_TRUE) {
        tmp[t] = arr[left];
        left++; t++;
      } else {
        tmp[t] = arr[right];
        right++; t++;
      }
    }

    const int64 sz = b - a + 1;
    for (t = 0; t < sz; t++){
      arr[a+t] = tmp[t];
    }
  }

  static void merge_sort(Value* arr, int64 a, int64 b, Value* tmp,
                         Value cmp_func)
  {
    CmpFunc cfunc;
    if (cmp_func == VALUE_NIL) cfunc = &op_lt;
    else cfunc = (CmpFunc) func_get_ptr(cmp_func, 2);

    merge_sort2(arr, a, b, tmp, cfunc);
  }
$

class Array1
  $
    Array1 a;
  $

  #$ rdoc-name Array1.new_const
  #$ rdoc-header Array1 Array1.new_const(Integer n, val)
  #$ Create an array of n elements, all of them val.
  new_const(n, val) | constructor
    $
      int64 n = val_to_int64(__n);
      @a.size = n;
      @a.alloc_size = n;
      @a.data = mem_malloc(sizeof(Value) * n);
      for (int64 i = 0; i < n; i++){
        @a.data[i] = __val;
      }
    $

  #$ rdoc-name Array1.clone
  #$ rdoc-header Array1 Array1.clone()
  #$ Create a clone of an array.
  clone()
    size = self.size
    arr = Array1.new_const(size, nil)
    for i in 1:size
      arr[i] = self.index(i)
    return arr

  #$ rdoc-name Array1.contains?
  #$ rdoc-header Bool Array1.contains?(v)
  #$ Returns whether the array contains v.
  contains?(v)
    for el in self
      if el == v
        return true
    return false

  #$ rdoc-name Array1.extend
  #$ rdoc-header Nil Array1.extend(Array1 a)
  #$ Extends the array by concatinating all elements of a.
  extend(Array1 array)
    for el in array
      self.push(el)

  #$ rdoc-name Array1.get_iter
  #$ rdoc-header Array1Iterator Array1.get_iter()
  #$ Returns an Array1Iterator over self.
  get_iter()
    return Array1Iterator.new(self)

  #$ rdoc-name Array1.index
  #$ rdoc-header ? Array1.index(Integer or Range i)
  #$ If i is an Integer, this returns the i-th element of the Array1.
  #$ If i is a range, this returns a new Array1View that is a view of the given
  #$ range of self.
  index(i)
    if i is Integer
      return $ array1_index(&(@a), val_to_int64(__i)) $
    if i is Range
      return Array1View.new(self, i)

  #$ rdoc-name Array1.index_set
  #$ rdoc-header Nil Array1.index_set(Integer i, val)
  #$ Sets the i-th element of the array to val.
  index_set(Integer i, val)
    $ array1_index_set(&(@a), val_to_int64(__i), __val); $

  #$ rdoc-name Array1.insert
  #$ rdoc-header Nil Array1.insert(Integer i, val)
  #$ Insert val into position i in the array.  Moves everything in position
  #$ i and beyond one step.
  insert(Integer i, val)
    if i == self.size + 1
      self.push(val)
      return
    $
      const int64 size = @a.size;
      array1_push(&(@a), __val);
      int64 idx = util_index("Array1",
                             val_to_int64(__i),
                             size);
      Value* data = @a.data;
      for (int64 i = size - 1; i >= idx; i--){
        data[i+1] = data[i];
      }
      data[idx] = __val;
    $

  #$ rdoc-name Array1.remove
  #$ rdoc-header Nil Array1.remove(Integer i)
  #$ Remove anything in position i in the array.  Moves everything in position
  #$ i and beyond one step.
  remove(Integer i)
    $
      const int64 size = @a.size;
      int64 idx = util_index("Array1",
                             val_to_int64(__i),
                             size);
      Value* data = @a.data;
      for (int64 i = idx; i < size; i++){
        data[i] = data[i+1];
      }
      @a.size--;
    $

  #$ rdoc-name Array1.push
  #$ rdoc-header Nil Array1.push(val)
  #$ Appends a Value val onto the end of the array. Returns nil.
  push(val)
    $ array1_push(&(@a), __val); $

  #$ rdoc-name Array1.pop
  #$ rdoc-header Array1.pop()
  #$ Removes the last element of the Array1 and returns it.  Throws an
  #$ exception if the Array1 is empty.
  pop()
    return $ array1_pop(&(@a)) $

  #$ rdoc-name Array1.reverse!
  #$ rdoc-header Nil Array1.reverse!()
  #$ Reverse array in place.
  reverse!()
    $
      const int64 sz = @a.size;
      const int64 upto = sz / 2;
      Value* data = @a.data;
      for (int64 i = 0; i < upto; i++){
        Value tmp = data[i];
        int64 j = sz - i - 1;
        data[i] = data[j];
        data[j] = tmp;
      }
    $

  #$ rdoc-name Array1.set_const
  #$ rdoc-header Nil Array1.set_const(val)
  #$ Sets each element of the array to val.
  set_const(val)
    $
      const int64 sz = @a.size;
      for (int64 i = 0; i < sz; i++){
        @a.data[i] = __val;
      }
    $

  #$ rdoc-name Array1.slice
  #$ rdoc-header Array1 Array1.slice(Range r)
  #$ This returns a new Array1 that is a slice of self.
  slice(r)
    $
      Range* range = val_to_range(__r);
      int64 start, finish;
      util_index_range("Array1",
                       range,
                       @a.size,
                       &start,
                       &finish);
      if (start <= finish){
        Value v = array1_new(finish - start + 1);
        Array1* arr = obj_c_data(v);
        for (int64 i = start; i <= finish; i++){
          arr->data[i - start] = @a.data[i];
        }
        RRETURN(v);
      } else {
        Value v = array1_new(start - finish + 1);
        Array1* arr = obj_c_data(v);
        for (int64 i = 0; i < start - finish + 1; i++){
          arr->data[i] = @a.data[start - i];
        }
        RRETURN(v);
      }
    $

  #$ rdoc-name Array1.sort!
  #$ rdoc-header Array1.sort!()
  #$ Sort array in place.
  sort!()
    $
      const int64 sz = @a.size;
      if (sz < 2) RRETURN(VALUE_NIL);
      Value* arr = @a.data;
      Value* tmp = mem_malloc(sizeof(Value) * sz);
      merge_sort(arr, 0, sz-1, tmp, 0);
      mem_free(tmp);
    $

  #$ rdoc-name Array1.sort_via!
  #$ rdoc-header Array1.sort_via!(Function via)
  #$ Sort array in place via a comparison function.  The comparison function
  #$ must accept two elements and answer the question "is element A smaller
  #$ than element B?"
  sort_via!(cmp)
    $
      const int64 sz = @a.size;
      if (sz < 2) RRETURN(VALUE_NIL);
      Value* arr = @a.data;
      Value* tmp = mem_malloc(sizeof(Value) * sz);
      merge_sort(arr, 0, sz-1, tmp, __cmp);
      mem_free(tmp);
    $

  #$ rdoc-name Array1.to_s
  #$ rdoc-header Array1.to_s()
  #$ Returns a string representation of the array.
  to_s()
    return ArrayUtil.to_s(self)

  #$ rdoc-name Array1.size
  #$ rdoc-header Array1.size
  #$ Returns the size (length) of the Array1.
  size() | virtual_get
    return $ int64_to_val(@a.size) $

#$ rdoc-name Array1View
#$ rdoc-header Array1View
#$ View of a range of Array1.  Allows most methods of Array1 to be called on
#$ on the view.
class Array1View
  var array
  var start
  var finish
  #$ rdoc-name Array1View.size
  #$ rdoc-header Array1View.size
  #$ Returns the length (size) of the view.
  var size
  var ascending

  new(array, range) | constructor
    @array = array
    array_size = array.size
    @start = ArrayUtil.index_start(array_size, range)
    @finish = ArrayUtil.index_finish(array_size, range)
    if @start > @finish
      @ascending = false
      @size = @start - @finish + 1
    else
      @ascending = true
      @size = @finish - @start + 1

  map_index(idx)
    idx = ArrayUtil.index(@size, idx)
    if @ascending
      return @start + idx - 1
    else
      return @start - idx + 1

  #$ rdoc-name Array1View.index
  #$ rdoc-header Array1View.index(Integer or Range index)
  #$ Behaves just like Array1.index().
  index(idx)
    if idx is Integer
      return @array[self.map_index(idx)]
    return Array1View.new(self, idx)

  #$ rdoc-name Array1View.index_set
  #$ rdoc-header Array1View.index_set(Integer index)
  #$ Behaves just like Array1.index_set().
  index_set(idx, value)
    @array[self.map_index(idx)] = value

  #$ rdoc-name Array1View.get_iter
  #$ rdoc-header Array1View.get_iter()
  #$ Behaves just like Array1.get_iter().
  get_iter()
    return Array1Iterator.new(self)

  #$ rdoc-name Array1View.to_s
  #$ rdoc-header Array1View.to_s()
  #$ Behaves just like Array1.to_s().
  to_s()
    return ArrayUtil.to_s(self)

#$ rdoc-name Array1Iterator
#$ rdoc-header Array1Iterator
#$ Iterator object over an Array1 (returns elements of the Array1
#$ sequentially).
class Array1Iterator
  var array
  var idx

  new(array) | constructor
    @array = array
    @idx = 1

  iter()
    if @idx > @array.size
      return eof
    val = @array[@idx]
    @idx = @idx + 1
    return val

namespace ArrayUtil
  index(Integer size, Integer idx)
    if idx > size or idx == 0 or idx < -size
      pass
      # Raise error here
    if idx > 0
      return idx
    return size + idx + 1

  index_start(Integer size, Range range)
    start = range.start
    if start == nil
      return 1
    return ArrayUtil.index(size, start)

  index_finish(Integer size, Range range)
    finish = range.finish
    if finish == nil
      return size
    return ArrayUtil.index(size, finish)

  to_s(arr)
    sz = arr.size
    if sz == 0
      return "[]"

    Integer i = 1
    String buf = "[" + arr[1]
    loop
      if i == sz
        break
      i = i + 1
      buf = buf + ", " + arr[i]
    return buf + "]"
