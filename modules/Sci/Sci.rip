namespace Sci
  class Sampler
    private arrays
    readable N
    private num_arrays

    constructor new(N)
      @N = N
      @arrays = []
      loop
        if N == 1
          break
        arr = Array1.new_const(N, 0.0)
        @arrays.push(arr)
        N = (N+1)/2
      @num_arrays = @arrays.size
      @arrays.reverse!()

    # Set a probability for j-th outcome.
    set(Integer j, Double p)
      arrn = @arrays[-1]
      Double delta = p - arrn[j]
      arrn[j] = p

      if @num_arrays > 1
        for i in (@num_arrays-1):1
          j = (j+1)/2
          Array1 arr = @arrays[i]
          arr[j] = arr[j] + delta

    # x must be a random number between 0.0 and 1.0
    sample(Double x)
      Integer a1 = 1
      Integer a2 = 2
      Integer b = 1

      # Scale x to be proportional to sum of all the rates
      Array1 arr1 = @arrays[1]
      x = (arr1[1] + arr1[2]) * x
      Out.println(x)

      for i in 1:@num_arrays
        Array1 arr = @arrays[i]
        if a2 > arr.size
          b = a1
          a1 = 2*b-1
          a2 = 2*b
        elif x < arr[a1]
          b = a1
          a1 = 2*b-1
          a2 = 2*b
        else
          x = x - arr[a1]
          b = a2
          a1 = 2*b-1
          a2 = 2*b
      return b

    display()
      for arr in @arrays
        Out.println(arr)

  namespace Bin
    histogram(A, num_bins)
      min = Iterable.min(A)
      max = Iterable.max(A)

      size_bin = Double(max - min) / num_bins
      bins_x = Array1.new_const(num_bins, 0)
      for i in 1:num_bins
        bins_x[i] = min + size_bin*(i-0.5)

      delta = 1.0 / A.size
      bins = Array1.new_const(num_bins, 0)
      for x in A
        bin = 0
        if x == max
          bin = num_bins
        else
          bin = Math.ceil((x - min) / size_bin) + 1
        bins[bin] = bins[bin] + delta

      return tuple(bins_x, bins)

  namespace Fit
    linear(X, Y)
      n = X.size
      if n != Y.size
        raise "size of X and Y must be the same in Sci.Fit.linear()"
      xbar = 0.0
      ybar = 0.0
      sxx = 0.0
      syy = 0.0
      sxy = 0.0
      for i in 1:n
        xbar = xbar + X[i]
        ybar = ybar + Y[i]
        sxx = sxx + X[i] * X[i]
        syy = syy + Y[i] * Y[i]
        sxy = sxy + X[i] * Y[i]
      xbar = xbar / n
      ybar = ybar / n
      ssxx = sxx - n * xbar * xbar
      #ssyy = syy - n * ybar * ybar
      ssxy = sxy - n * xbar * ybar
      slope = ssxy / ssxx
      intercept = ybar - slope*xbar
      return [intercept, slope]

  mean(X)
    n = 0
    avg = 0.0
    for el in X
      n = n + 1
      avg = avg + el
    return avg / n

  stddev(X)
    mean = Sci.mean(X)
    y = 0.0
    n = 0
    for el in X
      t = el - mean
      y = y + t*t
      n = n + 1
    return Math.sqrt(y/n)
