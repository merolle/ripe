$
  #include <stdio.h>
  #include <errno.h>
  #define TEXTFILE_READ 1
  #define TEXTFILE_WRITE 2
$

namespace TextFile
  var Read = $ int64_to_val(TEXTFILE_READ) $
  var Write = $ int64_to_val(TEXTFILE_WRITE) $

  read_file(filename)
    tf = TextFile.new(filename, TextFile.Read)
    s = tf.read_entire()
    tf.close()
    return s

  write_file(filename, text)
    tf = TextFile.new(filename, TextFile.Write)
    tf.print(text)
    tf.close()

class TextFile
  $ FILE* f; $

  new(filename, mode) | constructor
    $
      int64 mode = val_to_int64(__mode);
      const char* smode;
      if (mode == TEXTFILE_READ){
        smode = "r";
      }
      if (mode == TEXTFILE_READ + TEXTFILE_WRITE){
        smode = "rw";
      }
      if (mode == TEXTFILE_WRITE){
        smode = "w";
      }
      const char* filename = val_to_string(__filename);
      @f = fopen(filename, smode);
      if (@f == NULL){
        exc_raise("failed to open '%s'", filename);
      }
    $

  read_line()
    $
      #define FGETS_BUF (100*1024)
      char buf[FGETS_BUF];
      if (@f == NULL){
        exc_raise("attempted to read from a closed file");
      }
      if (fgets(buf, FGETS_BUF, @f) == NULL){
        if (feof(@f)) RRETURN(VALUE_EOF);
        exc_raise("error while reading from a file");
      }
      RRETURN(string_to_val(buf));
    $

  read_entire()
    s = nil
    $
      int len;
      if (fseek(@f, 0, SEEK_END) == -1){
        exc_raise("seeking to end of file failed: %s",
                  strerror(errno));
      }
      len = ftell(@f);
      if (len == -1){
        exc_raise("getting end-file offset failed: %s",
                  strerror(errno));
      }
      if (fseek(@f, 0, SEEK_SET) == -1){
        exc_raise("seeking to start of file failed: %s",
                  strerror(errno));
      }
      char* buf = alloca(len + 1);
      buf[len] = 0;
      if (fread(buf, len, 1, @f) != 1){
        exc_raise("failed to read entire file");
      }
      __s = string_to_val(buf);
    $
    return s

  print(text)
    $ const char* text = val_to_string(__text);
      assert(@f != NULL);
      uint64 len = strlen(text);
      if (len == 0) RRETURN(VALUE_NIL);
      if (fwrite(text, len, 1, @f) != 1){
        exc_raise("failed to write '%s' to text file: %s", text, strerror(errno));
      } $

  println(text)
    self.print(text)
    self.print("\n")

  get_iter()
    return self

  iter()
    return self.read_line()

  close()
    $
      if (@f == NULL){
        exc_raise("attempted to close a closed file");
      }
      fclose(@f);
    $
