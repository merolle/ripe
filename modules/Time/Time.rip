$
  #include <time.h>
  #include <unistd.h>
$

namespace Time

  #$ rdoc-name Time.get_current
  #$ rdoc-header Integer Time.get_current()
  #$ Returns the time since the epoch.
  get_current()
    $
      time_t t = time(NULL);
      return int64_to_val( (int64) t );
    $

  #$ rdoc-name Time.sleep
  #$ rdoc-header Time.sleep(Integer seconds)
  #$ Sleeps for a number of seconds.
  sleep(seconds)
    $
      sleep(val_to_int64(__seconds));
    $

  millisleep(ms)
    $ struct timespec req = { 0, 1000*1000*val_to_int64(__ms) };
      nanosleep(&req, NULL); $

  #$ rdoc-name Time.nanosleep
  #$ rdoc-header Time.nanosleep(Integer seconds, Integer nanoseconds)
  #$ Precisely sleep for an amount of time.
  nanosleep(seconds, nanoseconds)
    $
      struct timespec req = { val_to_int64(__seconds),
                              val_to_int64(__nanoseconds) };
      nanosleep(&req, NULL);
    $

  class Local
    $
      struct tm t;
    $

    constructor new(time)
      $
        time_t t = val_to_int64(__time);
        localtime_r(&t, &(@t));
      $

    virtual_get hour()
      $
        return int64_to_val( (int64) @t.tm_hour );
      $

    virtual_get minute()
      $
        return int64_to_val( (int64) @t.tm_min );
      $

    virtual_get weekday()
      $
        return int64_to_val( (int64) @t.tm_wday + 1 );
      $

    virtual_get month()
      $
        return int64_to_val( (int64) @t.tm_mon + 1 );
      $

    virtual_get day()
      $
        return int64_to_val( (int64) @t.tm_mday );
      $
