#$ rdoc-file Integer

#$ rdoc-name to_Integer
#$ rdoc-header Integer(arg)
#$ Convert arg to an Integer. Arg may be an Integer, String or a Double.
Integer(arg)
  $
    switch(__arg & MASK_TAIL){
      case 0b00:
        if (obj_klass(__arg) == klass_String){
          char* s = val_to_string(__arg);
          RRETURN(int64_to_val(atoi(s)));
        }
        goto err;
      case 0b01:
        RRETURN(__arg);
      case 0b10:
        RRETURN(int64_to_val((int64) unpack_double(__arg)));
      case 0b11:
        goto err;
    }

    err:
    exc_raise("Cannot convert %s into Integer",
              dsym_reverse_get(obj_klass(__arg)->name));
  $

#$ rdoc-name Integer
#$ rdoc-header Integer
#$ Class for an Integer datatype.
class Integer
  to_s()
    $ char buf[128];
      sprintf(buf, "%"PRId64, unpack_int64(__self)); $
    return $ string_to_val(buf) $

  #$ rdoc-name Integer.odd?
  #$ rdoc-header Integer.odd?()
  #$ Returns true if Integer is odd.
  odd?()
    return $ pack_bool((unpack_int64(__self) % 2) == 1) $

  #$ rdoc-name Integer.even?
  #$ rdoc-header Integer.even?()
  #$ Returns true if Integer is even.
  even?()
    return $ pack_bool((unpack_int64(__self) % 2) == 0) $

  # width = 2, loc = 5, total-width = 8
  # last = loc + width - 1
  #          * *
  #  1 2 3 4 5 6 7 8
  #  1 0 1 0 0 1 1 1
  #  0 0 0
  unpack(Integer loc, Integer width)
    $ int64 loc = unpack_int64(__loc);
      if (loc < 1 or loc > 62){
        exc_raise("invalid loc (%"PRId64") in bitfield", loc);
      }
      int64 width = unpack_int64(__width);
      if (width < 1){
        exc_raise("invalid width (%"PRId64") in bitfield", width);
      }
      uint64 self = (uint64) unpack_int64(__self);
      int64 last = loc + width - 1;
      if (last > 62){
        exc_raise("last bit (%"PRId64") outside of bitfield", last);
      }

      int64 tail = 64 - last;
      self = self << tail;
      self = self >> tail;
      self = self >> (loc - 1); $
    return $ pack_int64(self) $

  pack(Integer loc, Integer width, Integer i)
    $ int64 loc = unpack_int64(__loc);
      if (loc < 1 or loc > 62){
        exc_raise("invalid loc (%"PRId64") in bitfield", loc);
      }
      int64 width = unpack_int64(__width);
      if (width < 1){
        exc_raise("invalid width (%"PRId64") in bitfield", width);
      }
      uint64 self = (uint64) unpack_int64(__self);
      int64 last = loc + width - 1;
      if (last > 62){
        exc_raise("last bit (%"PRId64") outside of bitfield", last);
      }

      int64 mask = (1 << width) - 1;
      loc --;
      mask = mask << loc;
      self = self & (~mask);
      self = self | ((unpack_int64(__i) << loc) & mask); $
    return $ pack_int64(self) $
  
  get_bit(Integer loc)
    $ int64 loc = unpack_int64(__loc);
      if (loc < 1 or loc > 62){
        exc_raise("invalid loc(%"PRId64") in bitfield", loc);
      }
      loc--;
      int64 self = unpack_int64(__self);
      int64 mask = 1 << loc; $
    return $ pack_bool(self & mask) $
  
  set_bit(Integer loc)
    $ int64 loc = unpack_int64(__loc);
      if (loc < 1 or loc > 62){
        exc_raise("invalid loc(%"PRId64") in bitfield", loc);
      }
      loc--;
      int64 self = unpack_int64(__self);
      int64 mask = 1 << loc; $
    return $ pack_int64(self | mask) $
  
  remove_bit(Integer loc)
    $ int64 loc = unpack_int64(__loc);
      if (loc < 1 or loc > 62){
        exc_raise("invalid loc(%"PRId64") in bitfield", loc);
      }
      loc--;
      uint64 self = (uint64) unpack_int64(__self);
      int64 mask = 1 << loc; $
    return $ pack_int64(self & (~mask)) $

