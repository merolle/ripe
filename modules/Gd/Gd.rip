$
  #include <gd.h>
$

$
  typedef struct {
    int i;
  } Color;
$

namespace Gd
  class Image
    $ gdImagePtr image; $
    new(x, y) | constructor
      $
        @image = gdImageCreateTrueColor(val_to_int64(__x),
                                        val_to_int64(__y));
        if (@image == NULL){
          exc_raise("gdImageCreateTrueColor failed");
        }
      $

    new_from_file(filename) | constructor
      name, ext = Path.split_extension(filename)
      if ext == ".png"
        $
          FILE *in;
          in = fopen(val_to_string(__filename), "rb");
          @image = gdImageCreateFromPng(in);
          fclose(in);
        $


    set_pixel_rgb(x, y, r, g, b)
      $
        int color = gdImageColorAllocate(@image,
                                         val_to_int64(__r),
                                         val_to_int64(__g),
                                         val_to_int64(__b));
        gdImageSetPixel(@image, val_to_int64(__x)-1, val_to_int64(__y)-1, color);
      $

    get_pixel_rgb(x, y)
      $
        int color = gdImageGetPixel(@image, val_to_int64(__x)-1,
                                            val_to_int64(__y)-1);
      $
      red = $ int64_to_val(gdImageRed(@image, color)) $
      green = $ int64_to_val(gdImageGreen(@image, color)) $
      blue = $ int64_to_val(gdImageBlue(@image, color)) $
      return tuple(red, green, blue)

    get_pixel_bw(x, y)
      $
        int color = gdImageGetPixel(@image, val_to_int64(__x)-1,
                                            val_to_int64(__y)-1);
        int bw = (gdImageRed(@image, color) + gdImageGreen(@image, color)
               + gdImageBlue(@image, color))/3;
      $
      return $ int64_to_val(bw) $

    filled_rectangle_rgb(x1, y1, x2, y2, r, g, b)
      $
        int color = gdImageColorAllocate(@image,
                                         val_to_int64(__r),
                                         val_to_int64(__g),
                                         val_to_int64(__b));
        gdImageFilledRectangle(@image, val_to_int64(__x1)-1, val_to_int64(__y1)-1,
                                       val_to_int64(__x2)-1, val_to_int64(__y2)-1,
                                       color);
      $

    filled_arc(cx, cy, w, h, s, e, color)
      $
        gdImageFilledArc(@image,
                         val_to_int64(__cx),
                         val_to_int64(__cy),
                         val_to_int64(__w),
                         val_to_int64(__h),
                         val_to_int64(__s),
                         val_to_int64(__e),
                         val_to_int64(__color),
                         gdArc);
      $

    save_png(filename)
      $

        FILE* f = fopen(val_to_string(__filename), "wb");
        if (f == NULL) exc_raise("cannot open '%s' for writing",
                                 val_to_string(__filename));
        gdImagePng(@image, f);
        fclose(f);
      $

    size_x() | virtual_get
      return $ int64_to_val(gdImageSX(@image)) $

    size_y() | virtual_get
      return $ int64_to_val(gdImageSY(@image)) $

    destroy()
      $ gdImageDestroy(@image); $

  color(image, r, g, b)
    $  gdImagePtr* image = obj_c_data(__image); $
    return $ int64_to_val(gdImageColorAllocate(*image, val_to_int64(__r),
                                                       val_to_int64(__g),
                                                       val_to_int64(__b))); $
