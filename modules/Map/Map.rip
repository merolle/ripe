#$ rdoc-file Map

#$ rdoc-name Map
#$ rdoc-header Map
#$ A key-to-value map.
class Map
  $
    HashTable ht;
  $

  #$ rdoc-name Map.new
  #$ rdoc-header Map.new()
  #$ Create a new empty Map.
  new() | constructor
    $
      ht_init2(&(@ht), 0);
    $

  #$ rdoc-name Map.get_iter
  #$ rdoc-header Map.get_iter()
  #$ Return a MapIterator over this Map.
  get_iter()
    return MapIterator.new(self)

  #$ rdoc-name Map.index
  #$ rdoc-header Map.index(key)
  #$ Return the value associated with the given key. Throw an exception if
  #$ the key does not exist in the Map.
  index(key)
    $
      Value result;
      if (ht_query2(&(@ht), __key, &result))
        RRETURN(result);
      exc_raise("key error: '%s'", to_string(__key));
    $

  #$ rdoc-name Map.contains?
  #$ rdoc-header Map.contains?(key)
  #$ Returns true if the Map contains the given key.
  contains?(key)
    return $ pack_bool(ht_query2(&(@ht), __key, NULL)) $

  #$ rdoc-name Map.index_set
  #$ rdoc-header Map.index_set(key, value)
  #$ Add the given key to the map and assign its value to value.  If the key
  #$ already exists in the map, then its value is overwritten by the new value.
  index_set(key, value)
    $
      ht_set2(&(@ht), __key, __value);
    $

  #$ rdoc-name Map.to_s
  #$ rdoc-header Map.to_s()
  #$ Return a human var representation of the Map.
  to_s()
    $
      StringBuf sb;
      sbuf_init(&sb, "");
      sbuf_printf(&sb, "Map (");
      const int64 alloc_size = @ht.alloc_size;
      bool passed_first = false;

      for (int64 i = 0; i < alloc_size; i++){
        if (@ht.buckets[i] == BUCKET_FULL){
          if (passed_first){
            sbuf_printf(&sb, ", ");
          }
          sbuf_printf(&sb, "%s => %s", to_string(@ht.keys[i]), to_string(@ht.values[i]));
          passed_first = true;
        }
      }
      sbuf_printf(&sb, ")");
      Value rv = string_to_val(sb.str);
      sbuf_deinit(&sb); $
    return $ rv $

  #$ rdoc-name Map.size
  #$ rdoc-header Map.size
  #$ Number of key-value pairs in the Map.
  size() | virtual_get
    return $ int64_to_val(@ht.size) $


class MapIterator
  $
    HashTable* ht;
    uint64 cur;
  $
  new(map) | constructor
    $
      @ht = obj_c_data(__map);
      @cur = 0;
    $

  iter()
    $
      while (@cur < @ht->alloc_size){
        if (@ht->buckets[@cur] == BUCKET_FULL){
          @cur++;
    $
    key = $ @ht->keys[@cur - 1] $
    value = $ @ht->values[@cur - 1] $
    return tuple(key, value)
    $
        }
        @cur++;
      } $
    return eof

