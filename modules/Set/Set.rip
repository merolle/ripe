$
  #include "clib/stringbuf.h"
$

class Set
  $
    HashTable ht;
  $

  get_iter()
    return SetIterator.new(self)

  constructor new()
    $
      ht_init(&(@ht));
    $

  has?(key)
    $
      return pack_bool(ht_query(&(@ht), __key));
    $

  add(key)
    $
      ht_set(&(@ht), __key);
    $

  clear()
    $
      ht_clear(&(@ht));
    $

  remove(key)
    $
      return pack_bool(ht_remove(&(@ht), __key));
    $

  to_string()
    $
      StringBuf sb;
      sbuf_init(&sb, "");
      sbuf_printf(&sb, "Set (");
      const int64 alloc_size = @ht.alloc_size;
      bool passed_first = false;

      for (int64 i = 0; i < alloc_size; i++){
        if (@ht.buckets[i] == BUCKET_FULL){
          if (passed_first){
            sbuf_printf(&sb, ", ");
          }
          sbuf_printf(&sb, "%s", to_string(@ht.keys[i]));
          passed_first = true;
        }
      }
      sbuf_printf(&sb, ")");
      Value rv = string_to_val(sb.str);
      sbuf_deinit(&sb);
      return rv;
    $

  get_bucket(bucket)
    $
      int64 idx = val_to_int64(__bucket);
      if (idx < 1 or idx > @ht.alloc_size)
        exc_raise("invalid index %" PRId64 " in Set with %" PRId64" buckets",
                  idx, @ht.alloc_size);
      if (@ht.buckets[idx-1] == BUCKET_FULL){
        return @ht.keys[idx-1];
      }
      return VALUE_NIL;
    $

  virtual_get size()
    return $ int64_to_val(@ht.size) $

  virtual_get alloc_size()
    return $ int64_to_val(@ht.alloc_size) $

class SetIterator
  $
    HashTable* ht;
    int64 cur;
  $
  constructor new(set)
    $
      @ht = obj_c_data(__set);
      @cur = 0;
    $

  iter()
    $
      while (@cur < @ht->alloc_size){
        if (@ht->buckets[@cur] == BUCKET_FULL){
          @cur++;
          return @ht->keys[@cur - 1];
        }
        @cur++;
      }
      return VALUE_EOF;
    $
