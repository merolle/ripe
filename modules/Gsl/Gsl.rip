$ 
  #include <gsl/gsl_rng.h>
  #include <gsl/gsl_randist.h>
$

namespace Gsl
  class Rng
    $
      gsl_rng* rng;
    $
    
    constructor new()
      $
        @rng = gsl_rng_alloc(gsl_rng_default);
      $
    
    roll(p)
      $
        double dp = val_to_double(__p);
        double x = gsl_rng_uniform(@rng);
        if (x < dp) return VALUE_TRUE;
        return VALUE_FALSE;
      $
      
    uniform(a, b)
      $
        double da = val_to_double(__a);
        double db = val_to_double(__b);
        return double_to_val(da + gsl_rng_uniform(@rng) * (db - da));
      $
    
    uniform_int(a, b)
      $
        int64 a = val_to_int64(__a);
        int64 b = val_to_int64(__b);
        return int64_to_val(a + gsl_rng_uniform_int(@rng, b - a + 1));
      $
    
    exponential(mu)
      $
        return double_to_val(gsl_ran_exponential(@rng, val_to_double(__mu)));
      $

    seed_random()
      $
        FILE* file = fopen("/dev/urandom", "rb");
        int seed;
        int rv = fread(&seed, sizeof(int), 1, file);
        fclose(file);
        if (rv != 1) exc_raise("could not read from '/dev/urandom'");
        gsl_rng_set(@rng, seed);
      $
