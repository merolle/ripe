$
  #include <gsl/gsl_rng.h>
  #include <gsl/gsl_randist.h>
$

namespace Gsl
  class Rng
    $
      gsl_rng* rng;
    $

    constructor new()
      $
        @rng = gsl_rng_alloc(gsl_rng_default);
      $

    select(arr)
      sz = arr.size
      Double total = 0.0
      for i in 1:sz
        total = total + arr[i]
      Double p = 0.0
      Double C = self.uniform(0.0, 1.0)
      for i in 1:sz
        p = p + arr[i] / total
        if C < p
          return i
      return sz

    roll(p)
      $
        double dp = val_to_double(__p);
        double x = gsl_rng_uniform(@rng);
        if (x < dp) return VALUE_TRUE;
        return VALUE_FALSE;
      $

    uniform(a, b)
      $
        double da = val_to_double(__a);
        double db = val_to_double(__b);
        return double_to_val(da + gsl_rng_uniform(@rng) * (db - da));
      $

    uniform_int(a, b)
      $
        int64 a = val_to_int64(__a);
        int64 b = val_to_int64(__b);
        return int64_to_val(a + gsl_rng_uniform_int(@rng, b - a + 1));
      $

    exponential(mu)
      $
        return double_to_val(gsl_ran_exponential(@rng, val_to_double(__mu)));
      $

    seed_random()
      $
        FILE* file = fopen("/dev/urandom", "rb");
        int seed;
        int rv = fread(&seed, sizeof(int), 1, file);
        fclose(file);
        if (rv != 1) exc_raise("could not read from '/dev/urandom'");
        gsl_rng_set(@rng, seed);
      $

    # Choose a random element of the array
    choose(Array1 array)
      n = array.size
      Integer i = self.uniform_int(1, n)
      return array[i]

    # Shuffle the array using the Fisher-Yates-Durstenfeld-Knuth algorithm.
    shuffle!(array)
      n = array.size

      for i in 1:(n-1)
        Integer r = self.uniform_int(i, n)
        # Swap i-th element with r-th element
        t = array[r]
        array[r] = array[i]
        array[i] = t
