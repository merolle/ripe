namespace DataFormat
  load(filename)
    tf = TextFile.new(filename, TextFile.Read)

    map = Map.new()
    loop
      line = tf.read_line()
      if line == eof
        return map
      name = line.strip_whitespace()

      line = tf.read_line()
      classname = line.strip_whitespace()
      switch classname
        case "Array2"
          nx = Integer(tf.read_line().strip_whitespace())
          ny = Integer(tf.read_line().strip_whitespace())

          arr = Array2.new_const(nx, ny, 0)
          for x in 1:nx
            for y in 1:ny
              text = tf.read_line().strip_whitespace()
              if text.find(".") != nil
                arr[x,y] = Double(text)
              else
                arr[x,y] = Integer(text)
          map[name] = arr
        case "Num.Array2"
          type = Integer(tf.read_line().strip_whitespace())
          nx = Integer(tf.read_line().strip_whitespace())
          ny = Integer(tf.read_line().strip_whitespace())

          arr = Num.Array2.zeros(nx, ny, type)
          for x in 1:nx
            for y in 1:ny
              text = tf.read_line().strip_whitespace()
              if text.find(".") != nil
                arr[x,y] = Double(text)
              else
                arr[x,y] = Integer(text)
          map[name] = arr

  save(filename, map)
    tf = TextFile.new(filename, TextFile.Write)
    for k, v in map
      tf.println(k)
      if v is Array1
        tf.println("Array1")
        sz = v.size
        tf.println(sz.to_s())
        for i in 1:sz
          tf.println(v[i].to_s())

      if v is Array2
        tf.println("Array2")

        nx = v.size_x
        ny = v.size_y

        tf.println(nx.to_s())
        tf.println(ny.to_s())

        for x in 1:nx
          for y in 1:ny
            tf.println(v[x,y].to_s())

      if v is Num.Array2
        tf.println("Num.Array2")
        tf.println(v.type.to_s())
        nx = v.size_x
        ny = v.size_y

        tf.println(nx.to_s())
        tf.println(ny.to_s())

        for x in 1:nx
          for y in 1:ny
            tf.println(v[x,y].to_s())
    tf.close()
