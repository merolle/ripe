#$ rdoc-file Tuple

class Tuple
  $
    Tuple t;
  $
  get_iter()
    return TupleIterator.new(self)

  to_s()
    $ char buf[1024];
      buf[0] = 0;
      strcat(buf, "tuple(");
      for (int i = 0; i < @t.size; i++){
        const char* str = to_string(@t.data[i]);
        strcat(buf, str);
        if (i != @t.size - 1) strcat(buf, ", ");
      }
      strcat(buf, ")"); $
    return $ string_to_val(buf) $

  index(i)
    if i is Integer
      return $ tuple_index(&(@t), val_to_int64(__i)) $
    $
      Range* range = val_to_range(__i);
      int64 start, finish;
      util_index_range("Tuple",
                       range,
                       @t.size,
                       &start,
                       &finish);
      if (start <= finish){
        Tuple* tuple;
        Value v = tuple_new(finish - start + 1, &tuple);
        for (int64 i = start; i <= finish; i++){
          tuple->data[i - start] = @t.data[i];
        }
        RRETURN(v);
      } else {
        Tuple* tuple;
        Value v = tuple_new(start - finish + 1, &tuple);
        for (int64 i = 0; i < start - finish + 1; i++){
          tuple->data[i] = @t.data[start - i];
        }
        RRETURN(v);
      }
    $

  size() | virtual_get
    return $ int64_to_val(@t.size) $

#$ rdoc-name TupleIterator
#$ rdoc-header TupleIterator
#$ Iterator object over a Tuple (returns elements of the Tuple
#$ sequentially).
class TupleIterator
  var t
  var idx
  var sz

  new(t) | constructor
    @t = t
    @idx = 1
    @sz = t.size

  iter()
    if @idx > @sz
      return eof
    val = @t[@idx]
    @idx = @idx + 1
    return val
