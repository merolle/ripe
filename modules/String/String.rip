#$ rdoc-file String

namespace String
  #$ rdoc-name String.join
  #$ rdoc-header String String.join(Array1 array, String between)
  #$ Joins string elements of array into a string, separated by between.
  join(Array1 array, String between)
    if array.size == 0
      return ""
    if array.size == 1
      return array[1]
    s = array[1]
    for el in array[2:]
      s = s + between
      s = s + el
    return s

#$ rdoc-name String
#$ rdoc-header String
#$ A UTF-8 encoded string.
class String
  $
    String s;
  $

  #$ rdoc-name String.new_uniform
  #$ rdoc-header String.new_uniform(Integer c, Integer reps)
  #$ Creates a string of length reps, filled with characters c.
  constructor new_uniform(c, reps)
    $
      int64 reps = val_to_int64(__reps);
      int c = val_to_int64(__c);
      @s.str = mem_malloc(reps + 1);
      for (int64 i = 0; i < reps; i++){
        @s.str[i] = (char) c;
      }
    $

  #$ rdoc-name String.find
  #$ rdoc-header String.find(String substring)
  #$ Finds the index of the first occurence of substring in self.
  #$ If no occurence is found, it returns nil.
  find(String substring)
    $
      char* s = strstr(@s.str,
                       val_to_string(__substring));
      if (s) return int64_to_val(s - @s.str + 1);
      return VALUE_NIL;
    $

  #$ rdoc-name String.index
  #$ rdoc-header String.index(Integer or Range i)
  #$ Returns a Character (if i is an Integer) or a String, if i is a Range.
  index(i)
    $
      if (obj_klass(__i) == klass_Range){
        Range* range = val_to_range(__i);
        int64 start, finish;
        util_index_range("String",
                         range,
                         strlen(@s.str),
                         &start,
                         &finish);
        if (start <= finish){
          char buf[finish - start + 2];
          memcpy(buf, @s.str + start, finish - start + 1);
          buf[finish - start + 1] = 0;
          return string_to_val(buf);
        } else {
          char buf[start - finish + 2];
          for (int64 i = 0; i < start - finish + 1; i++){
            buf[i] = @s.str[start - i];
          }
          buf[start - finish + 1] = 0;
          return string_to_val(buf);
        }
      }
    $
    return $ int64_to_val(@s.str[util_index("String", val_to_int64(__i), strlen(@s.str))]); $

  #$ rdoc-name String.index_set
  #$ rdoc-header String.index_set(Integer i, Character c)
  #$ Sets the i-th character of a string to c.
  index_set(i, v)
    $
      @s.str[util_index("String", val_to_int64(__i), strlen(@s.str))] = (char) val_to_int64(__v);
    $

  #$ rdoc-name String.overwrite
  #$ rdoc-header String.overwrite(String s)
  #$ Overwrites the contents of the string with that of s.
  overwrite(s)
    $
      char* s = val_to_string(__s);
      if (s == @s.str) return VALUE_NIL;
      mem_free(@s.str);
      @s.str = mem_strdup(s);
    $

  #$ rdoc-name String.to_string
  #$ rdoc-header String.to_string()
  #$ Returns self.
  to_string()
    return self

  #$ rdoc-name String.rotate!
  #$ rdoc-header String Strong.rotate!(Integer delta)
  #$ Returns a string S1, a rotation of S2 where S1[x] = S2[x+delta]
  rotate!(Integer delta)
    $ if (@s.type == STRING_CONST){
        exc_raise("attempted to rotate! a constant string '%s'", @s.str);
      }

      const int64 size = strlen(@s.str);
      int64 delta = unpack_int64(__delta);
      char *s = @s.str;

      while (delta < 0) delta += size;
      while (delta >= size) delta -= size;
      if (delta == 0) return VALUE_NIL;

      char temp[size+1];
      strcpy(temp, s);
      for (int64 i = delta; i < size; i++){
        s[i - delta] = temp[i];
      }
      for (int64 i = 0; i < delta; i++){
        s[size - delta + i] = temp[i];
      } $

  #$ rdoc-name String.strip
  #$ rdoc-header String.strip()
  #$ Strips whitespace from left and right ends of the string.
  strip()
    $
      char* s = @s.str;
      while (*s == ' ' or *s == '\t' or *s == '\n') s++;
      int64 n = strlen(s);
      char d[n + 1];
      strcpy(d, s);
      char* p = d + n - 1;
      while (*p == ' ' or *p == '\t' or *p == '\n'){
        *p = 0;
        p--;
      }
    $
    return $ string_to_val(d) $

  #$ rdoc-name String.split
  #$ rdoc-header String.split(chars)
  #$ Splits a string into an Array1.  The String will be split at any occurence
  #$ of chars.  The resulting parts are guaranteed not to have any Characters
  #$ given in chars.
  split(chars)
    arr = []
    word = nil
    $
      char* string = @s.str;
      char* chars = val_to_string(__chars);
      bool in_word = false;
      StringBuf sb;
      sbuf_init(&sb, "");
      while (*string != 0){
        bool whitespace = false;
        if (strchr(chars, *string))
          whitespace = true;
        if (in_word){
          if (whitespace){
    $
    word = $ string_to_val(sb.str) $
    arr.push(word)
    $
            in_word = false;
          } else {
            sbuf_catc(&sb, *string);
          }
        } else {
          if (whitespace){
            /* move on */
          } else {
            sbuf_clear(&sb);
            in_word = true;
            sbuf_catc(&sb, *string);
          }
        }
        string++;
      }
      if (in_word){
    $
    word = $ string_to_val(sb.str) $
    arr.push(word)
    $
      }
      sbuf_deinit(&sb);
    $
    return arr

  #$ rdoc-name String.clone
  #$ rdoc-header String String.clone()
  #$ Clones the string.
  clone()
    $
      return string_to_val(@s.str);
    $

  #$ rdoc-name String.substitute_character!
  #$ rdoc-header String substitute_character!(Character a, Character b)
  #$ Replaces each character a in the string by b.
  substitute_character!(Integer c, Integer d)
    $
      int c = unpack_int64(__c);
      int d = unpack_int64(__d);
      for (char* s = @s.str; *s != 0; s++){
        if (*s == c) *s = d;
      }
    $

  #$ rdoc-name String.substitute
  #$ rdoc-header String substitute(String s1, String s2)
  #$ Return the string with each occurence of s1 replaced by s2.
  substitute(String s1, String s2)
    text = self
    len = s1.size
    loop
      n = text.find(s1)
      if n == nil
        break
      before = n - 1
      after = n + len
      prefix = nil
      suffix = nil
      if before < 1
        prefix = ""
      else
        prefix = text[:before]
      if after > text.size
        suffix = ""
      else
        suffix = text[after:]
      text = prefix + s2 + suffix
    return text

  #$ rdoc-name String.split_whitespace
  #$ rdoc-header String.split_whitespace()
  #$ Just like String.split(" \n\t")
  split_whitespace()
    return self.split(" \n\t")

  #$ rdoc-name String.plus
  #$ rdoc-header String.+
  #$ String concatenation.
  __plus(other)
    $
      const char* other = to_string(__other);
      int bufsize = strlen(@s.str) + strlen(other) + 1;
      char buf[bufsize];
      snprintf(buf, bufsize, "%s%s", @s.str, other);
      return string_to_val(buf);
    $

  __plus2(other)
    $
      const char* other = to_string(__other);
      int bufsize = strlen(@s.str) + strlen(other) + 1;
      char buf[bufsize];
      snprintf(buf, bufsize, "%s%s", other, @s.str);
      return string_to_val(buf);
    $

  #$ rdoc-name String.lt
  #$ rdoc-header String.<
  #$ String alphabetic comparison.
  __lt(other)
    $
      return pack_bool(strcmp(@s.str, val_to_string(__other)) < 0);
    $

  __lt2(other)
    $
      return pack_bool(strcmp(@s.str, val_to_string(__other)) > 0);
    $

  #$ rdoc-name String.lt
  #$ rdoc-header String.>
  #$ String alphabetic comparison.
  __gt(other)
    $
      return pack_bool(strcmp(@s.str, val_to_string(__other)) > 0);
    $

  __gt2(other)
    $
      return pack_bool(strcmp(@s.str, val_to_string(__other)) < 0);
    $

  #$ rdoc-name String.f
  #$ rdoc-header String.f(*args)
  #$ Returns a string with given formatting.
  f(*args)
    $
      Tuple* array = val_to_tuple(__args);
      const char* out = format_to_string(@s.str, array->size, array->data);
      return string_to_val(out);
    $

  #$ rdoc-name String.size
  #$ rdoc-header String.size
  #$ Returns the size (length) of the string.
  virtual_get size()
    $
      char* s = @s.str;
			int l = strlen(s);
			return int64_to_val(l);
    $

  #$ rdoc-name String.print
  #$ rdoc-header String.print(...)
  #$ Append arguments to the string.
  print(*args)
    for arg in args
      s = arg.to_string()
      $
        const char* arg = val_to_string(__s);
        @s.str = mem_realloc(@s.str, strlen(@s.str) + strlen(arg) + 1);
        strcat(@s.str, arg);
      $
