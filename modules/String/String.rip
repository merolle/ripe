$
  #include "clib/stringbuf.h"
$

class String
  $
    String s;
  $

  index(i)
    $
      if (obj_klass(__i) == klass_Range){
        Range* range = val_to_range(__i);
        int64 start, finish;
        util_index_range("String",
                         range,
                         strlen(@s.str),
                         &start,
                         &finish);
        if (start <= finish){
          char buf[finish - start + 2];
          memcpy(buf, @s.str + start, finish - start + 1);
          buf[finish - start + 1] = 0;
          return string_to_val(buf);
        } else {
          char buf[start - finish + 2];
          for (int64 i = 0; i < start - finish + 1; i++){
            buf[i] = @s.str[start - i];
          }
          buf[start - finish + 1] = 0;
          return string_to_val(buf);
        }
      }
    $
    return $ int64_to_val(@s.str[util_index("String", val_to_int64(__i), strlen(@s.str))]); $

  index_set(i, v)
    $
      @s.str[util_index("String", val_to_int64(__i), strlen(@s.str))] = (char) val_to_int64(__v);
    $

  to_string()
    return self

  strip()
    $
      char* s = @s.str;
      while (*s == ' ' or *s == '\t' or *s == '\n') s++;
      int64 n = strlen(s);
      char d[n + 1];
      strcpy(d, s);
      char* p = d + n - 1;
      while (*p == ' ' or *p == '\t' or *p == '\n'){
        *p = 0;
        p--;
      }
    $
    return $ string_to_val(d) $

  split(chars)
    arr = []
    word = nil
    $
      char* string = @s.str;
      char* chars = val_to_string(__chars);
      bool in_word = false;
      StringBuf sb;
      sbuf_init(&sb, "");
      while (*string != 0){
        bool whitespace = false;
        if (strchr(chars, *string))
          whitespace = true;
        if (in_word){
          if (whitespace){
    $
    word = $ string_to_val(sb.str) $
    arr.push(word)
    $
            in_word = false;
          } else {
            sbuf_catc(&sb, *string);
          }
        } else {
          if (whitespace){
            /* move on */
          } else {
            sbuf_clear(&sb);
            in_word = true;
            sbuf_catc(&sb, *string);
          }
        }
        string++;
      }
      if (in_word){
    $
    word = $ string_to_val(sb.str) $
    arr.push(word)
    $
      }
      sbuf_deinit(&sb);
    $
    return arr

  split_whitespace()
    return self.split(" \n\t")

  __plus(other)
    $
      const char* other = to_string(__other);
      int bufsize = strlen(@s.str) + strlen(other) + 1;
      char buf[bufsize];
      snprintf(buf, bufsize, "%s%s", @s.str, other);
      return string_to_val(buf);
    $

  __plus2(other)
    $
      const char* other = to_string(__other);
      int bufsize = strlen(@s.str) + strlen(other) + 1;
      char buf[bufsize];
      snprintf(buf, bufsize, "%s%s", other, @s.str);
      return string_to_val(buf);
    $

  virtual_get length()
    $
      char* s = @s.str;
			int l = strlen(s);
			return int64_to_val(l);
    $
