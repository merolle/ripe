$
  #include <pthread.h>

  typedef struct {
    Value func;
    Value extra;
  } ThreadHelper;

  static void* thread_helper(void* extra)
  {
    ThreadHelper* th = (ThreadHelper*) extra;
    func_call1(th->func, th->extra);
    mem_free(th);
    return NULL;
  }
$

namespace Pthread
  class Mutex
    $
      pthread_mutex_t mutex;
    $

    new() | constructor
      $
        if (pthread_mutex_init(&(@mutex), NULL)){
          exc_raise("could not initialize pthread mutex");
        }
      $

    lock()
      $
        if (pthread_mutex_lock(&(@mutex))){
          exc_raise("could not lock pthread mutex");
        }
      $

    unlock()
      $
        if (pthread_mutex_unlock(&(@mutex))){
          exc_raise("could not unlock pthread mutex");
        }
      $

    trylock()
      $
        return pack_bool(pthread_mutex_trylock(&(@mutex)) == 0);
      $

  class Thread
    $
      pthread_t thread;
    $

    new(func, extra) | constructor
      $
        ThreadHelper* th = mem_new(ThreadHelper);
        th->func = __func;
        th->extra = __extra;
        if (pthread_create(&(@thread), NULL, thread_helper, th)){
          exc_raise("could not start pthread thread");
        }
      $

    join()
      $
        pthread_join(@thread, NULL);
      $
