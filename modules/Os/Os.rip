#$ rdoc-file Os

$
  #include <stdlib.h>
  #include <unistd.h>
$

namespace Os
  #$ rdoc-name Os.exit
  #$ rdoc-header Os.exit(Integer i)
  #$ Exit the program with return code i.
  exit(Integer i)
    $
      exit(unpack_int64(__i));
    $

  #$ rdoc-name Os.get_env
  #$ rdoc-header Os.get_env(String var)
  #$ Get the value of environment variable var, or nil if it is not set.
  get_env(var)
    $
      char* var = val_to_string(__var);
      char* rv = getenv(var);
      if (rv == NULL) return VALUE_NIL;
      return string_to_val(rv);
    $

  #$ rdoc-name Os.get_environment
  #$ rdoc-header Os.get_environment()
  #$ Return a variable-to-value Map for the environment.
  get_environment()
    m = Map.new()
    $
      int i = 0;
      while (environ[i] != NULL){
        StringBuf sb_key;
        sbuf_init(&sb_key, "");
        char* s = environ[i];
        while (*s != '='){
          sbuf_catc(&sb_key, *s);
          s++;
        }
        char* key = sb_key.str; char* value = s + 1;
    $
    m[$ string_to_val(key) $] = $ string_to_val(value) $
    $
        sbuf_deinit(&sb_key);
        i++;
      }
    $
    return m

  #$ rdoc-name Os.get_args
  #$ rdoc-header Os.get_args()
  #$ Return an Array1 of the command line arguments.
  get_args()
    $
      Value* args = alloca((sys_argc - 1) * sizeof(Value));
      for (int arg = 1; arg < sys_argc; arg++){
        args[arg-1] = string_to_val(sys_argv[arg]);
      }
      return array1_to_val(sys_argc - 1, args);
    $

  #$ rdoc-name Os.system
  #$ rdoc-header Integer Os.system(String or Array1 arg)
  #$ Executes arg using the system shell.  If arg is an Array1, then the Array1
  #$ is first joined using String.join()
  system(arg)
    if arg is String
      return $ int64_to_val(system(val_to_string(__arg))) $
    if arg is Array1
      txt = String.join(arg, " ")
      return $ int64_to_val(system(val_to_string(__txt))) $
    raise "invalid type of argument to Os.system()"
