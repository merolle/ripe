namespace Opt

  find(needle, haystack, idx)
    for option in haystack
      attempt = option[idx]
      if needle == attempt
        return option
    return nil

  const ARG = 1
  const HELP = 2

  # Return 0 for nothing, 1 for short option and 2 for long option
  inspect(arg)
    if arg.size < 2
      return 0
    if arg[1] == '-'
      if arg[2] == '-'
        return 2
      return 1
    return 0

  display_help(options)
    Err.println("  available options:")
    for option in options
      opt2 = "  "
      if option[2] != nil
        opt2 = option[2]
      opt3 = option[3]
      if option[4] bit_and Opt.ARG != 0
        opt3 = opt3 + " ARG"
      loop
        if opt3.size < 25
           opt3 = opt3 + " "
        else
           break

      Err.println("    ", opt2, ", ", opt3, " ", option[5])

  # options should be of the form:
  #  the 4th is optional
  #  [
  #    [&HELP, "-h", "--help", Opt.HELP, "display help"]
  #  ]
  # Returns tuple(parsed, leftover) where both are arrays. In parsed, each
  # element is a 2-tuple (symbol, optarg). Leftover is a simple array of
  # strings.
  parse(args, options)
    parsed = []
    leftover = []
    index = 1
    loop
      if index > args.size
        break
      arg = args[index]
      index = index + 1

      type = Opt.inspect(arg)
      if type == 0
        leftover.push(arg)
        continue

      option = nil
      if type == 2
        option = Opt.find(arg, options, 3)
      else
        option = Opt.find(arg, options, 2)

      if option == nil
        Err.println("error: invalid option '{1}'".f(arg))
        Opt.display_help(options)
        Os.exit(1)

      flag = option[4]
      if flag bit_and Opt.HELP != 0
        Opt.display_help(options)
        Os.exit(0)

      # Obtain optarg
      optarg = nil
      if flag bit_and Opt.ARG != 0
        if index > args.size
          Err.println("error: option '{1}' requires an argument".f(arg))
          Opt.display_help(options)
          Os.exit(1)

        optarg = args[index]
        index = index + 1
        type = Opt.inspect(optarg)
        if type != 0
          Err.println("error: option '{1}' requires an argument".f(arg))
          Opt.display_help(options)
          Os.exit(1)
      parsed.push(tuple(option[1], optarg))
    return tuple(parsed, leftover)
