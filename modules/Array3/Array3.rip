#$ rdoc-file Array3

#$ rdoc-name Array3
#$ rdoc-header Array3
#$ Three dimensional array data structure.
class Array3
  $
    Array3 a;
  $

  #$ rdoc-name Array3.new_const
  #$ rdoc-header Array3.new_const(Integer x, Integer y, Integer z, v)
  #$ Create a new Array3 of dimensions x*y*z, and populated with elements v.
  new_const(x, y, z, v) | constructor
    $
      int64 x = val_to_int64(__x);
      int64 y = val_to_int64(__y);
      int64 z = val_to_int64(__z);
      if (x < 1 or y < 1 or z < 1)
        exc_raise("every Array3 dimension must be greater than 0");
      @a.size_x = x;
      @a.size_y = y;
      @a.size_z = z;
      int64 total_size = x*y*z;
      @a.data = mem_malloc(total_size * sizeof(Value));
      for (int64 i = 0; i < total_size; i++){
        @a.data[i] = __v;
      }
    $

  #$ rdoc-name Array3.index
  #$ rdoc-header Array3.index(Integer x, Integer y, Integer z)
  #$ Return the (x, y, z)-th element.
  index(x, y, z)
    $ int64 x = val_to_int64(__x);
      int64 y = val_to_int64(__y);
      int64 z = val_to_int64(__z);
      int64 i = array3_index(&(@a), x, y, z); $
    return $ @a.data[i]; $

  #$ rdoc-name Array3.index_set
  #$ rdoc-header Array3.index_set(Integer x, Integer y, Integer z, v)
  #$ Set the (x, y, z)-th element to v.
  index_set(x, y, z, v)
    $ int64 x = val_to_int64(__x);
      int64 y = val_to_int64(__y);
      int64 z = val_to_int64(__z);
      int64 i = array3_index(&(@a), x, y, z); $
    return $ @a.data[i] = __v; $

  #$ rdoc-name Array3.set_const
  #$ rdoc-header Array3.set_const(v)
  #$ Set all elements of Array3 to equal v.
  set_const(v)
    $
      const int64 total_size = @a.size_x * @a.size_y * @a.size_z;
      for (int64 i = 0; i < total_size; i++){
        @a.data[i] = __v;
      }
    $
