$
  #include "modules/Json/json.h"
  #include "modules/Json/json.c"
$

namespace Json
  parse(s)
    $
      int error = 0;
      char* error_text;
      Value v = json_parse(val_to_string(__s), &error, &error_text);
      if (error){
    $
    raise "JSON error: " + $ string_to_val(error_text) $
    $
      }
    $
    return $v$

  encode(obj)
    out = StringBuf.new()
    Json.encode_to_stringbuf(out, obj)
    return out.to_string()

  encode_to_stringbuf(StringBuf buf, obj)
    if obj is Map
      buf.print("{\n")
      index = 1
      for k, v in obj
        Json.encode_to_stringbuf(buf, k)
        buf.print(" : ")
        Json.encode_to_stringbuf(buf, v)
        if index < obj.size
          buf.print(",\n")
        else
          buf.print("\n")
        index = index + 1
      buf.print("}")

    if obj is Array1
      buf.print("[")
      index = 1
      for v in obj
        Json.encode_to_stringbuf(buf, v)
        if index < obj.size
          buf.print(",")
        index = index + 1
      buf.print("]")

    if obj is Integer
      buf.print(obj.to_string())
    if obj is Double
      buf.print(obj.to_string())
    if obj is String
      buf.print("\"")
      buf.print(obj)
      buf.print("\"")
    if obj == nil
      buf.print("null")
    if obj == true
      buf.print("true")
    if obj == false
      buf.print("false")
