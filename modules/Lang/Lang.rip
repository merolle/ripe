$ #include "lang/lang.h" $

namespace Fatal
  push(s)
    $ fatal_push("%s", val_to_string(__s)); $
  
  pop()
    $ fatal_pop(); $
    
class Node
  $ Node* n; $

  new_from_file(String filename) | constructor
    Fatal.push("while building AST of '{}'".f(filename))
    $ RipeInput input;
      input_from_file(&input, val_to_string(__filename));
      @n = build_tree(&input); $
    Fatal.pop()

  ptr() | virtual_get
    return $ ptr_to_val(@n) $

namespace Lang
  init()
    $ lang_init(); $

  c_name(text)
    return $ string_to_val(util_c_name(val_to_string(__text))) $

  process(ast)
    ptr = ast.ptr
    $ proc_process_ast(val_to_ptr_unsafe(__ptr)); $

  generate(ast)
    ptr = ast.ptr
    $ generate(val_to_ptr_unsafe(__ptr)); $

  namespace Stran
    absorb_ast(Node ast)
      ptr = ast.ptr
      $ stran_absorb_ast(val_to_ptr_unsafe(__ptr)); $

    absorb_file(String filename)
      $ stran_absorb_file(val_to_string(__filename)); $

    dump()
      $ stran_dump_to_file(stdout); $

namespace Wr
  dump(module_name)
    return $ string_to_val(wr_dump(val_to_string(__module_name))) $
