#$ rdoc-file Range

$
  #define ASCENDING 1
  #define DESCENDING 2
$

#$ rdoc-name Range
#$ rdoc-header Range
#$ An object that embodies a range of Integers (possibly unbounded).
class Range
  $
    Range range;
  $

  to_s()
    return "%a:%a".f(self.start, self.finish)

  #$ rdoc-name Range.get_iter
  #$ rdoc-header Range.get_iter()
  #$ Returns a RangeIterator over the given Range (possibly unbounded).
  get_iter()
    start = $ int64_to_val(@range.start) $
    finish = $ int64_to_val(@range.finish) $
    $
      switch(@range.type){
        case RANGE_BOUNDED:
          if (@range.start > @range.finish){
    $
    return RangeIterator.new(RangeBounded, start, finish, RangeIteratorDescending)
    $
          } else {
    $
    return RangeIterator.new(RangeBounded, start, finish, RangeIteratorAscending)
    $
          }
        case RANGE_BOUNDED_LEFT:
    $
    return RangeIterator.new(RangeBoundedLeft, start, 0, RangeIteratorAscending)
    $
        case RANGE_BOUNDED_RIGHT:
    $
    return RangeIterator.new(RangeBoundedLeft, finish, 0, RangeIteratorDescending)
    $
        case RANGE_UNBOUNDED:
          exc_raise("attempted to iterate an unbounded range");
      }
    $

  start() | virtual_get
    $
      switch(@range.type){
        case RANGE_BOUNDED:
        case RANGE_BOUNDED_LEFT:
          RRETURN(int64_to_val(@range.start));
        default:
          RRETURN(VALUE_NIL);
      }
    $

  finish() | virtual_get
    $
      switch(@range.type){
        case RANGE_BOUNDED:
        case RANGE_BOUNDED_RIGHT:
          RRETURN(int64_to_val(@range.finish));
        default:
          RRETURN(VALUE_NIL);
      }
    $

var RangeBounded = $ int64_to_val(RANGE_BOUNDED) $
var RangeBoundedLeft = $ int64_to_val(RANGE_BOUNDED_LEFT) $
var RangeIteratorAscending = $ int64_to_val(ASCENDING) $
var RangeIteratorDescending = $ int64_to_val(DESCENDING) $

#$ rdoc-name RangeIterator
#$ rdoc-header RangeIterator
#$ Iterator over a range of numbers (possibly unbounded).
class RangeIterator
  $
    RangeType range_type;
    int64 start;
    int64 finish;
    int64 cur;
    int iter_type;
  $

  #$ rdoc-name RangeIterator.new
  #$ rdoc-header RangeIterator.new(range_type, start, finish, iter_type)
  #$ Creates a new RangeIterator object. You shouldn't use this directly.
  #$ Instead use Range.get_iter().
  new(range_type, start, finish, iter_type) | constructor
    $
      @range_type = val_to_int64(__range_type);
      @start = val_to_int64(__start);
      @cur = @start;
      @finish = val_to_int64(__finish);
      @iter_type = val_to_int64(__iter_type);
    $

  #$ rdoc-name RangeIterator.iter
  #$ rdoc-header RangeIterator.iter()
  #$ Returns the next element from the Range. If no more elements in the
  #$ Range, then it returns eof.
  iter()
    $
      switch(@iter_type){
        case ASCENDING:
          {
            switch(@range_type){
              case RANGE_BOUNDED:
                if (@cur > @finish) RRETURN(VALUE_EOF);
              case RANGE_BOUNDED_LEFT:
                @cur++;
                RRETURN(int64_to_val(@cur - 1));
              case RANGE_BOUNDED_RIGHT:
              case RANGE_UNBOUNDED:
                assert_never();
            }
          }
        case DESCENDING:
          {
            switch(@range_type){
              case RANGE_BOUNDED:
                if (@cur < @finish) RRETURN(VALUE_EOF);
              case RANGE_BOUNDED_LEFT:
                @cur--;
                RRETURN(int64_to_val(@cur + 1));
              case RANGE_BOUNDED_RIGHT:
              case RANGE_UNBOUNDED:
                assert_never();
            }
          }
      }
    $
