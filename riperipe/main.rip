# Copyright (C) 2010  Maksim Sipos <msipos@mailc.net>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#######################################################################
# Utilities

sys(args)
  txt = String.join(args, " ")
  if g_verbose
    Err.println(txt)
  if Os.system(args) != 0
    raise "Os.system(\"{}\") failed".f(txt)

load_meta(filename)
  map = Map.new()
  tf = TextFile.new(filename, TextFile.Read)
  for line in tf
    line = line.strip()
    n = line.find("=")
    left = line[:(n-1)].strip()
    right = line[(n+1):].strip()
    map[left] = right
  return map
  tf.close()

#######################################################################
# Globals

global g_verbose = false
global g_cflags = "", g_lflags = "", g_omit_typing = false
global g_optims = { &FOR_LOOPS => true,
                    &TYPES => true,
                    &FUNC_CALLS => true,
                    &TYPE_VERIFY => false }

is_verbose?()
  return g_verbose

get_optims()
  return g_optims

#######################################################################
# String Buffers

global g_sbufs = Map.new()
get_sbufs()
  return g_sbufs

init_sbufs()
  g_sbufs[&header] = StringBuf.new()
  g_sbufs[&code] = StringBuf.new()
  g_sbufs[&init1a] = StringBuf.new()
  g_sbufs[&init1b] = StringBuf.new()
  g_sbufs[&init2] = StringBuf.new()
  g_sbufs[&init3] = StringBuf.new()

dump(module_name, out)
  out.println("#include \"modules/modules.h\"")
  out.println(g_sbufs[&header].to_string())
  out.println(g_sbufs[&code].to_string())
  out.println("void init1a_{}(){{}".f(module_name))
  out.println(g_sbufs[&init1a].to_string())
  out.println("}")
  out.println("void init1b_{}(){{}".f(module_name))
  out.println(g_sbufs[&init1b].to_string())
  out.println("}")
  out.println("void init2_{}(){{}\n".f(module_name))
  out.println(g_sbufs[&init2].to_string())
  out.println("}\n")
  out.println("void init3_{}(){{}\n".f(module_name))
  out.println(g_sbufs[&init3].to_string())
  out.println("}\n")

#######################################################################
# Actions
go_dump(files)
  asts = []
  for file in files
    ast = Ast.Node.new_from_file(file)
    asts.push(ast)
    Typer.absorb_info(ast)
  for ast in asts
    generate(ast)

  out = StringBuf.new()
  dump("User", out)
  Out.println(out.to_string())

go_bootstrap(files, outfile)
  asts = []
  rips = []
  objs = []
  for file in files
    root, ext = Path.split_extension(file)
    switch ext
      case ".rip"
        rips.push(file)

        ast = Ast.Node.new_from_file(file)
        asts.push(ast)
        Typer.absorb_info(ast)
      case ".o"
        objs.push(file)
      case ".meta"
        meta = load_meta(file)
        if "cflags" in meta
          g_cflags = g_cflags + " " + meta["cflags"]
        if "lflags" in meta
          g_lflags = g_lflags + " " + meta["lflags"]

  index = 1
  for ast in asts
    if g_verbose
      Err.println("generating ", rips[index])
    generate(ast)
    index = index + 1

  tmp_c_file = Path.temp_name("ripe", ".c")
  tf = TextFile.new(tmp_c_file, TextFile.Write)
  dump("User", tf)
  tf.close()

  tmp_o_file = Path.temp_name("ripe", ".o")
  sys(["gcc", g_cflags, tmp_c_file, "-c", "-o", tmp_o_file])
  Path.remove(tmp_c_file)

  objs_txt = String.join(objs, " ")
  sys(["gcc", g_lflags, objs_txt, tmp_o_file, "-o", outfile])
  Path.remove(tmp_o_file)

go_build(files, outfile)
  asts = []
  rips = []
  objs = []
  for file in files
    root, ext = Path.split_extension(file)
    switch ext
      case ".rip"
        rips.push(file)

        ast = Ast.Node.new_from_file(file)
        asts.push(ast)
        Typer.absorb_info(ast)
      case ".o"
        objs.push(file)

  for ast in asts
    generate(ast)

  # Compile ripe
  tmp_c_file = Path.temp_name("ripe", ".c")
  tf = TextFile.new(tmp_c_file, TextFile.Write)
  dump("User", tf)
  tf.close()
  tmp_o_file = Path.temp_name("ripe", ".o")
  sys(["gcc", g_cflags, tmp_c_file, "-c", "-o", tmp_o_file])
  Path.remove(tmp_c_file)

  # Generate module loader, append to other objects
  mods = ["User"]
  mods.extend(Module.get_list())
  loader = Module.make_loader(mods, g_cflags)
  objs.push(loader)
  objs.extend(Module.get_objs())
  objs.push(Path.join(Path.get_program_dir(), "vm.o"))

  objs_txt = String.join(objs, " ")

  cmdline = ["gcc", g_lflags, objs_txt, tmp_o_file, "-o", outfile]
  cmdline.extend(Module.get_lflags())
  sys(cmdline)
  Path.remove(tmp_o_file)
  Path.remove(loader)

go_run(leftover)
  outfile = Path.temp_name("ripe", "")
  go_build(leftover, outfile)
  sys([outfile])
  Path.remove(outfile)

go_module(files, module_name, outfile)
  asts = []
  rips = []
  objs = []
  for file in files
    root, ext = Path.split_extension(file)
    switch ext
      case ".rip"
        rips.push(file)
        ast = Ast.Node.new_from_file(file)
        asts.push(ast)
        if not g_omit_typing
          Typer.absorb_info(ast)
      case ".o"
        objs.push(file)
      case ".meta"
        meta = load_meta(file)
        if "cflags" in meta
          g_cflags = g_cflags + " " + meta["cflags"]
      case ".typ"
        Typer.load_from_file(file)
  for ast in asts
    generate(ast)

  tmp_c_file = Path.temp_name("ripe", ".c")
  tf = TextFile.new(tmp_c_file, TextFile.Write)
  dump(module_name, tf)
  tf.close()

  tmp_o_file = Path.temp_name("ripe", ".o")
  sys(["gcc", "-c", g_cflags, tmp_c_file, "-o", tmp_o_file])
  Path.remove(tmp_c_file)

  objs_txt = String.join(objs, " ")
  sys(["ld", "-r", objs_txt, tmp_o_file, "-o", outfile])
  Path.remove(tmp_o_file)

go_type(files)
  for file in files
    root, ext = Path.split_extension(file)
    if ext == ".rip"
      ast = Ast.Node.new_from_file(file)
      Typer.absorb_info(ast)
    else
      raise "Can only read .rip files in typer mode"
  Typer.dump()

load_defaults()
  root_dir = Path.get_program_dir()
  meta = load_meta(Path.join(root_dir, "ripe.meta"))
  g_cflags = g_cflags + " " + meta["cflags"]
  g_lflags = g_lflags + " " + meta["lflags"]
  modules = meta["modules"]
  arr = modules.split_whitespace()
  for module in arr
    Module.add(module)
  g_cflags = g_cflags + " -I"+Path.join(root_dir, "include")

main()
  init_sbufs()

  options = [
    [&BOOTSTRAP,    "-s", "--bootstrap", 0  , "bootstrap build"],
    [&BUILD,        "-b", "--build", 0, "build program"],
    [&BUILD_MODULE, "-c", "--build-module", 0, "module build"],
    [&DUMP,         "-d", "--dump", 0, "dump C code"],
    [&NAME,         "-n", "--module-name", Opt.ARG, "set module name"],
    [&MODULE,       "-m", "--module", Opt.ARG, "use a module"],
    [&OUTFILE,      "-o", "--outfile", Opt.ARG, "set output filename"],
    [&TYPE,         "-t", "--typer", 0, "create typer output"],
    [&OMIT_TYPING,   nil, "--omit-typing", 0, "omit typing"],
    [&NO_OPTIMS,     nil, "--no-optims", 0, "do not optimize"],
    [&NO_FOR_OPTIMS, nil, "--no-for-optims", 0, "do not optimize for loops"],
    [&NO_FUNC_CALL_OPTIMS, nil, "--no-func-call-optims", 0, "do not optimize function calls"],
    [&OPTIM_VERIFY,  nil, "--optim-verify", 0, "optimize out type verifications"],
    [&CFLAGS,        nil, "--cflags", Opt.ARG, "set flags to C compiler"],
    [&LFLAGS,        nil, "--lflags", Opt.ARG, "set flags to linker"],
    [&VERBOSE,      "-v", "--verbose", 0, "verbose"],
    [&HELP,         "-h", "--help", Opt.HELP, "display help"]
  ]

  args = Os.get_args()
  parsed, leftover = Opt.parse(args, options)

  if leftover.size == 0
    Opt.display_help(options)
    return

  outfile = "r.out"
  module_name = "Module"
  mode = &RUN
  for opt in parsed
    switch opt[1]
      case &BOOTSTRAP
        mode = &BOOTSTRAP
      case &BUILD
        mode = &BUILD
      case &BUILD_MODULE
        mode = &BUILD_MODULE
      case &DUMP
        mode = &DUMP
      case &NAME
        module_name = opt[2]
      case &OUTFILE
        outfile = opt[2]
      case &OMIT_TYPING
        g_omit_typing = true
      case &NO_OPTIMS
        for k, v in g_optims
          g_optims[k] = false
      case &NO_FOR_OPTIMS
        g_optims[&FOR_LOOPS] = false
      case &NO_FUNC_CALL_OPTIMS
        g_optims[&FUNC_CALLS] = false
      case &OPTIM_VERIFY
        g_optims[&TYPE_VERIFY] = true
      case &TYPE
        mode = &TYPE
      case &CFLAGS
        g_cflags = g_cflags + " " + opt[2]
      case &LFLAGS
        g_lflags = g_lflags + " " + opt[2]
      case &MODULE
        Module.add(opt[2])
      case &VERBOSE
        g_verbose = true

  # These modes do not load the defaults
  switch mode
    case &BOOTSTRAP
      go_bootstrap(leftover, outfile)
      return 0
    case &TYPE
      go_type(leftover)
      return 0

  # Remaining modes do load the defaults
  load_defaults()
  switch mode
    case &DUMP
      go_dump(leftover)
    case &BUILD_MODULE
      go_module(leftover, module_name, outfile)
    case &BUILD
      go_build(leftover, outfile)
    case &RUN
      go_run(leftover)
