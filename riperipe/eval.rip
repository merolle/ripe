# Copyright (C) 2010  Maksim Sipos <msipos@mailc.net>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

global unary_ops, binary_ops

init_ops()
  if unary_ops == nil
    unary_ops = Map.new()
    unary_ops['-'] = "op_unary_minus"
    unary_ops[Ast.K_NOT] = "op_unary_not"
    unary_ops[Ast.K_BIT_NOT] = "op_unary_bit_not"
  if binary_ops == nil
    binary_ops = Map.new()
    binary_ops['+'] = "op_plus"
    binary_ops['-'] = "op_minus"
    binary_ops['*'] = "op_star"
    binary_ops['/'] = "op_slash"
    binary_ops[Ast.K_AND] = "op_and"
    binary_ops[Ast.K_OR] = "op_or"
    binary_ops[Ast.K_BIT_AND] = "op_bit_and"
    binary_ops[Ast.K_BIT_OR] = "op_bit_or"
    binary_ops[Ast.K_BIT_XOR] = "op_bit_xor"
    binary_ops[Ast.K_MODULO] = "op_modulo"
    binary_ops[Ast.OP_EQUAL] = "op_equal"
    binary_ops[Ast.OP_NOT_EQUAL] = "op_not_equal"
    binary_ops['>'] = "op_gt"
    binary_ops['<'] = "op_lt"
    binary_ops[Ast.OP_LTE] = "op_lte"
    binary_ops[Ast.OP_GTE] = "op_gte"

value_barrier(Tuple t)
  switch t[1]
    case "Value"
      return t[2]
    case "int64"
      return "int64_to_val(%a)".f(t[2])
    case "double"
      return "double_to_val(%a)".f(t[2])
    case "bool"
      return "pack_bool(%a)".f(t[2])
  raise "invalid expression type"

eval_type(node)
  if node.num_children == 1
    return node.get_string("name") + "." + eval_type(node[1])
  else
    return node.get_string("name")

eval_v_expr(node)
  return value_barrier(eval_expr(node))

eval_expr_as_id(Ast.Node expr)
  switch expr.type
    case Ast.ID
      return expr.text
    case Ast.EXPR_FIELD
      parent = expr[1]
      field = expr.get_string("name")
      s = eval_expr_as_id(parent)
      if s != nil
        return "%a.%a".f(s, field)
      else
        return nil
  return nil

eval_expr_list(expr_list, first_comma)
  txt = ""
  index = 1
  for expr in expr_list
    if index == 1
      if first_comma
        txt = ", "
    else
      txt = txt + ", "
    index = index + 1
    txt = txt + eval_v_expr(expr)
  return txt

eval_obj_call(Ast.Node obj, String method_name, args)
  return "method_call%a(%a, %a %a)".f(
                      args.size,
                      eval_v_expr(obj),
                      Dsym.get(method_name),
                      eval_expr_list(args, true) )

eval_index_set(Ast.Node node_self, index_args, Ast.Node assign)
  args = []
  for arg in index_args
    args.push(arg)
  args.push(assign)
  return eval_obj_call(node_self, "index_set", args)

eval_index(Ast.Node node_self, index_args)
  return eval_obj_call(node_self, "index", index_args)

eval_static_call(ssym, arg_list)
  tr = Typer.get(ssym, Typer.FUNCTION)[1]
  #rv_type = tr[1]
  param_types = tr[2]

  num_args = arg_list.num_children
  num_params = param_types.size

  # Check if this static call is to a vararg function.
  is_vararg? = false
  if num_params > 0
    if param_types[-1] == "*"
      is_vararg? = true

  txt = "func_call%a(%a".f(num_params, Ssym.get(ssym))
  # Now generate code.
  if is_vararg?
    min_args = param_types.size - 1
    if num_args < min_args
      raise "'%a' called with %a arguments but expect at least %a".f(
                                                            ssym,
                                                            num_args,
                                                            min_args)
    if min_args > 0
      for index in 1:min_args
        arg = arg_list[index]
        txt = txt + ", %a".f(eval_v_expr(arg))
    txt = txt + ", tuple_to_val(%a".f(num_args - min_args)
    if num_args > min_args
      for index in (min_args+1):num_args
        arg = arg_list[index]
        txt = txt + ", %a".f(eval_v_expr(arg))
    txt = txt + ")"
  else
    if num_args != num_params
      raise "'%a' called with %a arguments but expect %a".f(ssym,
                                                            num_args,
                                                            num_params)
    for arg in arg_list
      txt = txt + ", %a".f(eval_v_expr(arg))
  return txt + ")"

# All expression evaluators that return a Value.
eval_expr_Value(expr)
  switch expr.type
    case Ast.K_NIL
      return "VALUE_NIL"
    case Ast.K_EOF
      return "VALUE_EOF"
    case Ast.ID
      local_var = locals_query(expr.text)
      if local_var == nil
        return Ssym.get(expr.text)
      else
        return local_var.c_name
    case Ast.SYMBOL
      return Dsym.get(expr.text[2:])
    case Ast.STRING
      return "string_to_val(\"%a\")".f(expr.text)
    case Ast.EXPR_ARRAY
      expr_list = expr[1]
      return "array1_to_val2(%a%a)".f(expr_list.num_children,
                                      eval_expr_list(expr_list, true))
    case Ast.EXPR_INDEX
      return eval_index(expr[1], expr[2])
    case Ast.EXPR_FIELD_CALL
      parent = expr[1]
      field = expr.get_string("name")
      arg_list = expr[2]

      s = eval_expr_as_id(parent)
      if s == nil
        return eval_obj_call(parent, field, arg_list)
      elif locals_query(s) != nil
        return eval_obj_call(parent, field, arg_list)

      return eval_static_call("%a.%a".f(s, field), arg_list)
    case Ast.EXPR_ID_CALL
      left_id = expr[1].text
      arg_list = expr[2]
      if locals_query(left_id) != nil
        raise "variable '%a' called like a function".f(left_id)
      if left_id == "tuple"
        return "tuple_to_val(%a%a)".f(arg_list.num_children,
                                      eval_expr_list(arg_list, true))
      return eval_static_call(left_id, arg_list)
    case Ast.EXPR_RANGE_BOUNDED
      left = expr[1]
      right = expr[2]
      return ("range_to_val(RANGE_BOUNDED, "
              "val_to_int64(%a), val_to_int64(%a))".f(
                                          eval_v_expr(left),
                                          eval_v_expr(right)
                                                     ) )
    case Ast.EXPR_RANGE_BOUNDED_LEFT
      left = expr[1]
      return ("range_to_val(RANGE_BOUNDED_LEFT, "
              "val_to_int64(%a), 0)".f(eval_v_expr(left)))
    case Ast.EXPR_RANGE_BOUNDED_RIGHT
      right = expr[1]
      return ("range_to_val(RANGE_BOUNDED_RIGHT, "
              "0, val_to_int64(%a))".f(eval_v_expr(right)))
    case Ast.EXPR_RANGE_UNBOUNDED
      return "range_to_val(RANGE_UNBOUNDED, 0, 0)"
    case Ast.EXPR_FIELD
      left = expr[1]
      field = expr.get_string("name")
      s = eval_expr_as_id(left)

      # Is it a dynamic field?
      dynamic_field = false
      if s == nil
        dynamic_field = true
      elif locals_query(s) != nil
        dynamic_field = true
      if dynamic_field
        return "field_get(%a, %a)".f(eval_v_expr(left),
                                     Dsym.get(field))

      # For sure it is a static symbol
      return Ssym.get(eval_expr_as_id(expr))

    case Ast.EXPR_AT_VAR
      name = expr.get_string("name")
      if Ctx.class_type_get() != &FIELD
        raise "'@%a' in a class that's not a field class".f(name)
      return "_c_data[%a]".f(Ctx.class_dict_get(name))

    case Ast.C_CODE
      text = expr.text[2:-2]
      text = text.substitute("@", "_c_data->")
      return text

  return ""

eval_expr(expr)
  init_ops()
  if expr.size == 1
    if unary_ops.has_key?(expr.type)
      return tuple("Value", "%a(%a)".f(
                                        unary_ops[expr.type],
                                        eval_v_expr(expr[1])
                                      ))
  if expr.size == 2
    if binary_ops.has_key?(expr.type)
      return tuple("Value", "%a(%a,%a)".f(
                                          binary_ops[expr.type],
                                          eval_v_expr(expr[1]),
                                          eval_v_expr(expr[2])
                                         ))

  switch expr.type
    case Ast.K_TRUE
      return tuple("bool", "true")
    case Ast.K_FALSE
      return tuple("bool", "false")
    case Ast.INT
      return tuple("int64", expr.text)
    case Ast.DOUBLE
      return tuple("double", expr.text)
    case Ast.CHARACTER
      return tuple("int64", expr.text[2])
    case Ast.EXPR_IS_TYPE
      return tuple("bool", "(obj_klass(%a) == %a)".f(
                                  eval_v_expr(expr[1]),
                                  Type.get(eval_type(expr[2]))
                                      ))

  return tuple("Value", eval_expr_Value(expr))
