# Copyright (C) 2010  Maksim Sipos <msipos@mailc.net>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

global unary_ops =  { '-'              => "op_unary_minus",
                      Node.K_NOT        => "op_unary_not",
                      Node.K_BIT_NOT    => "op_unary_bit_not" }

# When to optimize out the binary operator?
const NEVER = 0
# For NUMERIC, the behaviour is the following:
#   int64, int64  => int64
#   int64, double => double
#  double, double => double
# Integer, Double => double
# Integer, double => double
# ...
const NUMERIC = 1
# Like NUMERIC, except the result is always a bool
const BOOL_NUMERIC = 2

global binary_ops = { '+'              => ["op_plus", NUMERIC, "+"],
                      '-'              => ["op_minus", NUMERIC, "-"],
                      '*'              => ["op_star", NUMERIC, "*"],
                      '/'              => ["op_slash", NUMERIC, "/"],
                      '^'              => ["op_exp", NEVER, nil],
                      Node.K_AND        => ["op_and", NEVER, nil],
                      Node.K_OR         => ["op_or", NEVER, nil],
                      Node.K_IN         => ["op_in", NEVER, nil],
                      Node.K_BIT_AND    => ["op_bit_and", NEVER, nil],
                      Node.K_BIT_OR     => ["op_bit_or", NEVER, nil],
                      Node.K_BIT_XOR    => ["op_bit_xor", NEVER, nil],
                      Node.K_MODULO     => ["op_modulo", NEVER, nil],
                      Node.OP_EQUAL     => ["op_equal", NEVER, nil],
                      Node.OP_NOT_EQUAL => ["op_not_equal", NEVER, nil],
                      '>'              => ["op_gt", BOOL_NUMERIC, ">"],
                      '<'              => ["op_lt", BOOL_NUMERIC, "<"],
                      Node.OP_LTE       => ["op_lte", BOOL_NUMERIC, "<="],
                      Node.OP_GTE       => ["op_gte", BOOL_NUMERIC, ">="] }

value_barrier(Tuple t)
  switch t[1]
    case "int64"
      return "int64_to_val({})".f(t[2])
    case "double"
      return "double_to_val({})".f(t[2])
    case "bool"
      return "pack_bool({})".f(t[2])
  # For anything else (including nil), return itself
  return t[2]

eval_type(node)
  if node == nil
    return "?"
  type = eval_expr_as_id_simple(node)
  if type == nil
    raise "type node failed to evaluate as id (type = {})".f(node.type)
  return type

eval_expr_as_id_simple(Node expr)
  switch expr.type
    case Node.ID
      return expr.text
    case Node.EXPR_FIELD
      parent = expr.get_child(1)
      field = expr.get_string("name")
      s = eval_expr_as_id_simple(parent)
      if s != nil
        return "{}.{}".f(s, field)
      else
        return nil
  return nil

eval_expr_as_id(Node expr)
  switch expr.type
    case Node.ID
      if locals_query(expr.text) != nil
        return nil
      return expr.text
    case Node.EXPR_FIELD
      parent = expr.get_child(1)
      field = expr.get_string("name")
      s = eval_expr_as_id(parent)
      if s != nil
        return "{}.{}".f(s, field)
      else
        return nil
  return nil

eval_expr_list(Array1 expr_list, first_comma)
  txt = ""
  index = 1
  for expr in expr_list
    if index == 1
      if first_comma
        txt = ", "
    else
      txt = txt + ", "
    index = index + 1
    txt = txt + eval_expr_untyped(expr)
  return txt

eval_obj_call(Node obj, String method_name, Array1 args)
  t, e_obj = eval_expr(obj)
  if t == "int64"
    t = "Integer"
  if t == "bool"
    t = "Bool"
  if t == "double"
    t = "Double"
  if t == "?" or not get_optims()[&TYPES]
    return "method_call{}({}, {} {})".f(
                        args.size,
                        eval_expr_untyped(obj),
                        Dsym.get(method_name),
                        eval_expr_list(args, true) )
  else
    new_args = Node.new_typed(Node.EXPR_LIST)
    new_args.add_child(obj)
    for arg in args
      new_args.add_child(arg)
    return eval_static_call("{}.{}".f(t, method_name), new_args)

eval_index_set(Node node_self, Node index_args, Node assign)
  args = []
  for arg in index_args.children
    args.push(arg)
  args.push(assign)
  return eval_obj_call(node_self, "index_set", args)

eval_index(Node node_self, Array1 index_args)
  return eval_obj_call(node_self, "index", index_args)

eval_static_call(ssym, arg_list)
  func_info = Stran.get_function(ssym)
  if func_info == nil
    raise "failed to find '{}' in Stran database".f(ssym)
  #rv_type = tr[1]
  param_types = func_info.params

  num_args = arg_list.num_children
  num_params = param_types.size

  # Check if this static call is to a vararg function.
  is_vararg? = false
  if num_params > 0
    if param_types[-1] == "*"
      is_vararg? = true

  # Generate function call arguments
  txt_args = ""
  if is_vararg?
    min_args = param_types.size - 1
    if num_args < min_args
      raise "'{}' called with {} arguments but expect at least {}".f(
                                                            ssym,
                                                            num_args,
                                                            min_args)
    if min_args > 0
      for index in 1:min_args
        arg = arg_list.get_child(index)
        param_type = param_types[index]

        if param_type == "?"
          txt_args = "{}, {}".f(txt_args, eval_expr_untyped(arg))
        else
          txt_args = "{}, {}".f(txt_args, eval_expr_typesafe(arg, param_type))
    txt_args = "{}, tuple_to_val({}".f(txt_args, num_args - min_args)
    if num_args > min_args
      for index in (min_args+1):num_args
        arg = arg_list.get_child(index)
        txt_args = "{}, {}".f(txt_args, eval_expr_untyped(arg))
    txt_args = "{})".f(txt_args)
  else
    if num_args != num_params
      raise "'{}' called with {} arguments but expect {}".f(ssym,
                                                            num_args,
                                                            num_params)
    if num_args > 0
      for i in 1:num_args
        arg = arg_list.get_child(i)
        param_type = param_types[i]
        if param_type == "?"
          txt_args = "{}, {}".f(txt_args, eval_expr_untyped(arg))
        else
          txt_args = "{}, {}".f(txt_args, eval_expr_typesafe(arg, param_type))

  if get_optims()[&FUNC_CALLS]
    return "FUNC_CALL({}{})".f(FuncTable.get(ssym, num_params), txt_args)
  else
    return "func_call{}({}{})".f(num_params, Ssym.get(ssym), txt_args)

#######################################################################
# Operator optimizations

numeric_proc(t, e)
  switch t
    case "int64"
      return e
    case "Integer"
      return "val_to_int64({})".f(e)
    case "double"
      return e
    case "Double"
      return "val_to_double({})".f(e)
  raise "Assertion error! This line should not be reached"

global numeric_types = ["int64", "double", "Integer", "Double"]
global double_types = ["double", "Double"]
numeric_op(tuple1, tuple2, op)
  t1, e1 = tuple1
  t2, e2 = tuple2

  if not ((t1 in numeric_types) and (t2 in numeric_types))
    return nil

  proc1 = numeric_proc(t1, e1)
  proc2 = numeric_proc(t2, e2)
  result_t = "int64"
  if (t1 in double_types) or (t2 in double_types)
    result_t = "double"
  return tuple(result_t, "({} {} {})".f(proc1, op[3], proc2))

bool_numeric_op(tuple1, tuple2, op)
  t1, e1 = tuple1
  t2, e2 = tuple2

  if not ((t1 in numeric_types) and (t2 in numeric_types))
    return nil

  proc1 = numeric_proc(t1, e1)
  proc2 = numeric_proc(t2, e2)
  return tuple("bool", "({} {} {})".f(proc1, op[3], proc2))

#######################################################################
# Convenience functions for eval_expr (most external code will call
# these)

eval_expr_untyped(Node node)
  return value_barrier(eval_expr(node))

eval_expr_typesafe(Node expr, String type)
  tup = eval_expr(expr)
  expr_type, str = tup
  if type == expr_type
    return str

  # Handle non-Value types
  if type == "Bool" and expr_type == "bool"
    return value_barrier(tup)
  if type == "Integer" and expr_type == "int64"
    return value_barrier(tup)
  if type == "Double" and expr_type == "double"
    return value_barrier(tup)

  # Here, at most we can do is ensure run-time type safety
  if expr_type == "?"
    if get_optims()[&TYPE_VERIFY]
      return str
    else
      return "obj_verify_assign({}, {})".f(str, Type.get(type))

  raise ("expression which evaluated to '{}' has type '{}' "
         "but is required to have type '{}'".f(str, expr_type, type))

#######################################################################
# eval_expr

# All expression evaluators that return a Value.
eval_expr_Value(Node expr)
  switch expr.type
    case Node.SYMBOL
      return Dsym.get(expr.text[2:])
    case Node.EXPR_MAP
      m_list = expr.get_child(1)
      Bool is_map = false
      Bool is_set = false
      args = ""

      num_ms = m_list.num_children
      for m in m_list.children
        switch m.num_children
          case 2
            is_map = true
            args = "{}, {}, {}".f(args,
                                  eval_expr_untyped(m.get_child(1)),
                                  eval_expr_untyped(m.get_child(2)))
          case 1
            is_set = true
            args = "{}, {}".f(args, eval_expr_untyped(m.get_child(1)))

      if is_map and is_set
        raise "invalid curly braces: is this a set or a map?"
      if is_map
        return "ht_new_map({}{})".f(num_ms, args)
      if is_set
        return "ht_new_set({}{})".f(num_ms, args)
    case Node.EXPR_INDEX
      return eval_index(expr.get_child(1), expr.get_child(2).children)
    case Node.EXPR_FIELD_CALL
      parent, arg_list = expr.children
      field = expr.get_string("name")

      s = eval_expr_as_id(parent)
      if s == nil
        return eval_obj_call(parent, field, arg_list.children)
      elif locals_query(s) != nil
        return eval_obj_call(parent, field, arg_list.children)

      return eval_static_call("{}.{}".f(s, field), arg_list)
    case Node.EXPR_ID_CALL
      left_id = expr.get_child(1).text
      arg_list = expr.get_child(2)
      if locals_query(left_id) != nil
        raise "variable '{}' called like a function".f(left_id)
      if left_id == "tuple"
        return "tuple_to_val({}{})".f(arg_list.num_children,
                                      eval_expr_list(arg_list.children, true))
      return eval_static_call(left_id, arg_list)
    case Node.EXPR_FIELD
      left = expr.get_child(1)
      field = expr.get_string("name")
      s = eval_expr_as_id(left)

      # Is it a dynamic field?
      dynamic_field = false
      if s == nil
        dynamic_field = true
      elif locals_query(s) != nil
        dynamic_field = true
      if dynamic_field
        return "field_get({}, {})".f(eval_expr_untyped(left),
                                     Dsym.get(field))

      # For sure it is a static symbol
      return Ssym.get(eval_expr_as_id(expr))
    case Node.EXPR_AT_VAR
      name = expr.get_string("name")
      if Ctx.class_type_get() != &FIELD
        raise "'@{}' in a class that's not a field class".f(name)
      return "_c_data[{}]".f(Ctx.class_dict_get(name))
    case Node.C_CODE
      text = expr.text.strip("$")
      text = text.substitute("@", "_c_data->")
      if expr.line > 0
        text = "\n#line {} \"{}\"\n{}".f(expr.line - 1, expr.filename, text)
      return text
  raise "Assertion error: invalid expression type"

eval_expr(expr)
  if expr.num_children == 1
    if expr.type in unary_ops
      return tuple("?", "{}({})".f(
                                        unary_ops[expr.type],
                                        eval_expr_untyped(expr.get_child(1))
                                      ))
  if expr.num_children == 2
    if expr.type in binary_ops
      t1 = eval_expr(expr.get_child(1))
      t2 = eval_expr(expr.get_child(2))
      v1 = value_barrier(t1)
      v2 = value_barrier(t2)

      op = binary_ops[expr.type]
      result = nil
      if op[2] == NUMERIC
        result = numeric_op(t1, t2, op)
      if op[2] == BOOL_NUMERIC
        result = bool_numeric_op(t1, t2, op)

      if not get_optims()[&TYPES]
        result = nil

      if result == nil
        return tuple("?", "{}({},{})".f(op[1], v1, v2))
      else
        return result

  switch expr.type
    case Node.K_NIL
      return tuple("Nil", "VALUE_NIL")
    case Node.K_EOF
      return tuple("Eof", "VALUE_EOF")
    case Node.K_TRUE
      return tuple("bool", "true")
    case Node.K_FALSE
      return tuple("bool", "false")
    case Node.INT
      return tuple("int64", expr.text)
    case Node.DOUBLE
      return tuple("double", expr.text)
    case Node.CHARACTER
      return tuple("int64", expr.text[2])
    case Node.STRING
      return tuple("String", Strings.get(expr.text))
    case Node.EXPR_ARRAY
      expr_list = expr.get_child(1)
      return tuple("Array1", "array1_to_val2({}{})".f(expr_list.num_children,
                                              eval_expr_list(expr_list.children, true)))
    case Node.EXPR_IS_TYPE
      return tuple("bool", "(obj_klass({}) == {})".f(
                                  eval_expr_untyped(expr.get_child(1)),
                                  Type.get(eval_type(expr.get_child(2)))
                                      ))
    case Node.ID
      local_var = locals_query(expr.text)
      if local_var == nil
        return tuple("?", Ssym.get(expr.text))
      else
        return tuple(local_var.type, local_var.c_name)

    case Node.EXPR_RANGE_BOUNDED
      left, right = expr.children
      # TODO: These val_to_int64s should be handled better...
      return tuple("Range", "range_to_val(RANGE_BOUNDED, "
              "val_to_int64({}), val_to_int64({}))".f(
                                          eval_expr_untyped(left),
                                          eval_expr_untyped(right)
                                                     ) )
    case Node.EXPR_RANGE_BOUNDED_LEFT
      left = expr.get_child(1)
      return tuple("Range", "range_to_val(RANGE_BOUNDED_LEFT, "
              "val_to_int64({}), 0)".f(eval_expr_untyped(left)))
    case Node.EXPR_RANGE_BOUNDED_RIGHT
      right = expr.get_child(1)
      return tuple("Range", "range_to_val(RANGE_BOUNDED_RIGHT, "
              "0, val_to_int64({}))".f(eval_expr_untyped(right)))
    case Node.EXPR_RANGE_UNBOUNDED
      return tuple("Range", "range_to_val(RANGE_UNBOUNDED, 0, 0)")

  return tuple("?", eval_expr_Value(expr))
