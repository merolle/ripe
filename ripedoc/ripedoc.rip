begins_with(string, start)
  if start.size > string.size
    return false
  for i in 1:start.size
    if start[i] != string[i]
      return false
  return true

pad(text, width)
  text = text.to_string()
  if text.size < width
    return String.new_uniform(' ', width - text.size) + text
  return text

global doc_group, doc_name, doc_map, doc_file, file_map
do_doc(line)
  arr = line.split_whitespace()
  if begins_with(arr[1], "rdoc")
    # Special line
    if arr[1] == "rdoc-file"
      doc_file = arr[2]
      file_map[doc_file] = Set.new()
    if arr[1] == "rdoc-name"
      doc_name = arr[2]
      if doc_file != nil
        file_map[doc_file].add(doc_name)
      doc_map[doc_name] = Map.new()
      doc_map[doc_name][&file] = doc_file
      doc_map[doc_name][&header] = ""
      doc_map[doc_name][&text] = ""
      return
    if arr[1] == "rdoc-header"
      doc_map[doc_name][&header] = String.join(arr[2:], " ")
      return
  else
    doc_map[doc_name][&text] = doc_map[doc_name][&text] + line

global rip_total = 0, rip_empty = 0, rip_comment = 0, rip_doc = 0
process_rip(path)
  f = TextFile.new(path, TextFile.Read)
  for line in f
    line = line.strip()
    if line == ""
      rip_empty = rip_empty + 1
    if begins_with(line, "#")
      rip_comment = rip_comment + 1
    if begins_with(line, "#$")
      rip_doc = rip_doc + 1
      rip_comment = rip_comment - 1
      do_doc(line[3:])
    rip_total = rip_total + 1
  f.close()

global c_total = 0, c_empty = 0, c_comment = 0, c_doc = 0
process_c(path)
  f = TextFile.new(path, TextFile.Read)
  for line in f
    line = line.strip()
    if line == ""
      c_empty = c_empty + 1
    if begins_with(line, "//")
      c_comment = c_comment + 1
    if begins_with(line, "//$")
      c_doc = c_doc + 1
      c_comment = c_comment - 1
      do_doc(line[4:])
    c_total = c_total + 1
  f.close()

process(root)
  for path, type in Path.Walker.new(root)
    name, ext = Path.split_extension(path)
    if type == Path.REGULAR
      if ext == ".rip"
        process_rip(path)
      if ext == ".c" or ext == ".h" or ext == ".y" or ext == ".l"
        process_c(path)

make_links(text, names_by_size, ignore)
  arr = [text]
  for name in names_by_size
    i = 1
    loop
      if i > arr.size
        break
      el = arr[i]

      # Ignore those elements that are already links
      if el.size == 0
        i = i + 1
        continue
      if el[1] == '<'
        i = i + 1
        continue

      loc = el.find(name)
      if loc == nil
        i = i + 1
        continue

      before = nil
      after = nil
      if loc == 1
        before = ""
      else
        before = el[:(loc-1)]
      middle = el[loc:(loc+name.size-1)]
      if middle == ignore
        i = i + 1
        continue
      middle = "<a href=\"#" + name + "\">" + middle + "</a>"

      if loc+name.size > el.size
        after = ""
      else
        after = el[(loc+name.size):]
      arr[i] = after
      arr.insert(i, middle)
      arr.insert(i, before)
      # Now i = before, i + 1 = middle, i + 2 = after
      i = i + 2
  return String.join(arr, "")

by_size(a, b)
  return a.size < b.size

main()
  doc_map = Map.new()
  file_map = Map.new()

  args = Os.get_args()
  for arg in args
    process(arg)

  Out.println("Line number results:")
  Out.println()
  format = "%a     %a  %a  %a  %a\n"
  Out.printf(format, pad("", 5), "total", "empty", "cmmnt", " doc ")
  Out.printf(format, "C:   ",
                     pad(c_total, 5),
                     pad(c_empty, 5),
                     pad(c_comment, 5),
                     pad(c_doc, 5))
  Out.printf(format, "Ripe:",
                     pad(rip_total, 5),
                     pad(rip_empty, 5),
                     pad(rip_comment, 5),
                     pad(rip_doc, 5))

  names = []
  names_by_size = []
  for name, doc in doc_map
    names.push(name)
    names_by_size.push(name)
  names.sort!()
  names_by_size.sort_via!(by_size)
  names_by_size.reverse!()

  Out.printf("\nNumber of ripedoc elements: %a\n", names.size)

  tf = TextFile.new("ripedoc.html", TextFile.Write)
  tf.printf("<html>\n  <head><title>Ripe Documentation</title>")
  tf.printf("<link rel=\"stylesheet\" type=\"text/css\" href=\"ripedoc.css\" /></head>\n")
  tf.printf("<body>\n")
  for name in names
    doc = doc_map[name]

    header = make_links(doc[&header], names_by_size, name)
    text = make_links(doc[&text], names_by_size, name)
    tf.printf("<div class=\"article\"><a name=\"%a\"></a>\n", name)
    tf.printf("<div class=\"header\">%a</div>", header)
    tf.printf("<div class=\"text\">%a</div>", text)
    tf.print("</div>\n")
  tf.printf("</body>\n</html>")
