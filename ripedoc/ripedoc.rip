begins_with(string, start)
  if start.size > string.size
    return false
  for i in 1:start.size
    if start[i] != string[i]
      return false
  return true

pad(text, width)
  text = text.to_s()
  if text.size < width
    return String.new_uniform(' ', width - text.size) + text
  return text

global doc_group, doc_name, doc_map, doc_file, file_map
do_doc(line)
  arr = line.split_whitespace()
  if begins_with(arr[1], "rdoc")
    # Special line
    if arr[1] == "rdoc-file"
      doc_file = arr[2]
      file_map[doc_file] = Set.new()
    if arr[1] == "rdoc-name"
      doc_name = arr[2]
      if doc_file != nil
        file_map[doc_file].add(doc_name)
      doc_map[doc_name] = Map.new()
      doc_map[doc_name][&file] = doc_file
      doc_map[doc_name][&header] = ""
      doc_map[doc_name][&text] = ""
      return
    if arr[1] == "rdoc-header"
      doc_map[doc_name][&header] = String.join(arr[2:], " ")
      return
  else
    doc_map[doc_name][&text] = doc_map[doc_name][&text] + line

global rip_total = 0, rip_empty = 0, rip_comment = 0, rip_doc = 0
process_rip(path)
  f = TextFile.new(path, TextFile.Read)
  for line in f
    line = line.strip()
    if line == ""
      rip_empty = rip_empty + 1
    if begins_with(line, "#")
      rip_comment = rip_comment + 1
    if begins_with(line, "#$")
      rip_doc = rip_doc + 1
      rip_comment = rip_comment - 1
      do_doc(line[3:])
    rip_total = rip_total + 1
  f.close()

global c_total = 0, c_empty = 0, c_comment = 0, c_doc = 0
process_c(path)
  f = TextFile.new(path, TextFile.Read)
  for line in f
    line = line.strip()
    if line == ""
      c_empty = c_empty + 1
    if begins_with(line, "//")
      c_comment = c_comment + 1
    if begins_with(line, "//$")
      c_doc = c_doc + 1
      c_comment = c_comment - 1
      do_doc(line[4:])
    c_total = c_total + 1
  f.close()

global py_total = 0, py_empty = 0, py_comment = 0, py_doc = 0
process_py(path)
  f = TextFile.new(path, TextFile.Read)
  for line in f
    line = line.strip()
    if line == ""
      py_empty = py_empty + 1
    if begins_with(line, "#")
      py_comment = py_comment + 1
    if begins_with(line, "#$")
      py_doc = py_doc + 1
      py_comment = py_comment - 1
      do_doc(line[3:])
    py_total = py_total + 1
  f.close()

process(root)
  for path, type in Path.Walker.new(root)
    name, ext = Path.split_extension(path)
    if type == Path.REGULAR
      if ext == ".rip"
        process_rip(path)
      if ext == ".c" or ext == ".h" or ext == ".y" or ext == ".l"
        process_c(path)
      if ext == ".py"
        process_py(path)

make_links(text, names, ignore)
  arr = [text]
  for name in names
    i = 1
    loop
      if i > arr.size
        break
      el = arr[i]

      # Ignore those elements that are already links
      if el.size == 0
        i = i + 1
        continue
      if el[1] == '<'
        i = i + 1
        continue

      loc = el.find(name)
      if loc == nil
        i = i + 1
        continue

      before = nil
      after = nil
      if loc == 1
        before = ""
      else
        before = el[:(loc-1)]
      middle = el[loc:(loc+name.size-1)]
      if middle == ignore
        i = i + 1
        continue
      if doc_map[name][&file] != nil
        url = doc_map[name][&file] +".html#" + name
        middle = "<a href=\"" + url + "\">" + middle + "</a>"

      if loc+name.size > el.size
        after = ""
      else
        after = el[(loc+name.size):]
      arr[i] = after
      arr.insert(i, middle)
      arr.insert(i, before)
      # Now i = before, i + 1 = middle, i + 2 = after
      i = i + 2
  return String.join(arr, "")

by_size(a, b)
  return a.size < b.size

do_menu(tf, current)
  files = []
  for file, set in file_map
    files.push(file)
  files.sort!()

  tf.println("<div class=\"menu\"><ul>")
  for file in files
    if file == current
      tf.println("<li><span class=\"menu\">{}</a></li>".f(file))
    else
      tf.println("<li><a class=\"menu\" href=\"{}.html\">{}</a></li>".f(
                file, file))
  tf.println("</ul></div>")

global names_by_size
do_file(file, set)
  names = []
  for name in set
    names.push(name)
  names.sort!()

  if names.size == 0
    return

  tf = TextFile.new(file+".html", TextFile.Write)
  tf.print("<html>\n  <head><title>Ripe Documentation</title>")
  tf.print("<link rel=\"stylesheet\" type=\"text/css\" href=\"ripedoc.css\" /></head>\n")
  tf.print("<body>\n")
  do_menu(tf, file)

  tf.print("<div class=\"content\">\n")
  for name in names
    doc = doc_map[name]

    header = make_links(doc[&header], names_by_size, name)
    text = make_links(doc[&text], names_by_size, name)
    tf.println("<div class=\"article\"><a name=\"{}\"></a>".f(name))
    tf.print("<div class=\"header\">{}</div>".f(header))
    tf.print("<div class=\"text\">{}</div>".f(text))
    tf.println("</div>")
  tf.println("</div>")
  tf.println("</body>\n</html>")

main()
  doc_map = Map.new()
  file_map = Map.new()

  args = Os.get_args()
  for arg in args
    process(arg)

  Out.println("Line number results:")
  format = "  {}     {}  {}  {}  {}     {}\n"
  Out.println(format.f(pad("", 7), "total", "empty", "cmmnt", "  doc", "actual"))
  c_actual = c_total - c_empty - c_comment - c_doc
  Out.println(format.f("C:     ",
                     pad(c_total, 5),
                     pad(c_empty, 5),
                     pad(c_comment, 5),
                     pad(c_doc, 5),
                     pad(c_actual, 6)))
  rip_actual = rip_total - rip_empty - rip_comment - rip_doc
  Out.println(format.f("Ripe:  ",
                     pad(rip_total, 5),
                     pad(rip_empty, 5),
                     pad(rip_comment, 5),
                     pad(rip_doc, 5),
                     pad(rip_actual, 6)))
  py_actual = py_total - py_empty - py_comment - py_doc
  Out.println(format.f("Python:",
                     pad(py_total, 5),
                     pad(py_empty, 5),
                     pad(py_comment, 5),
                     pad(py_doc, 5),
                     pad(py_actual, 6)))

  # Construct names_by_size
  names_by_size = []
  for name, doc in doc_map
    names_by_size.push(name)
  names_by_size.sort_via!(by_size)
  names_by_size.reverse!()
  Out.println("\nNumber of ripedoc elements: {}".f(names_by_size.size))
  Out.println("Number of ripedoc files: {}".f(file_map.size))

  for file, set in file_map
    do_file(file, set)
